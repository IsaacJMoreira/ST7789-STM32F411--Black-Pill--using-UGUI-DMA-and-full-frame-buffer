
ST7789_uGUI_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001caa4  080062fc  080062fc  000072fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022da0  08022da0  00024028  2**0
                  CONTENTS
  4 .ARM          00000008  08022da0  08022da0  00023da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022da8  08022da8  00024028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022da8  08022da8  00023da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022dac  08022dac  00023dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08022db0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c3f8  20000028  08022dd8  00024028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c420  08022dd8  00024420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fea9  00000000  00000000  00024058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002446  00000000  00000000  00033f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aaf  00000000  00000000  00037130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180aa  00000000  00000000  00037bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011282  00000000  00000000  0004fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961b6  00000000  00000000  00060f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f70c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a88  00000000  00000000  000f7104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fab8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062e4 	.word	0x080062e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	080062e4 	.word	0x080062e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 feab 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f873 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9ad 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 f98b 	bl	80007f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80004de:	f000 f927 	bl	8000730 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f95d 	bl	80007a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004e6:	f000 f8d1 	bl	800068c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 80004ea:	f000 fe55 	bl	8001198 <LCD_init>
  LCD_TearEffect(0);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fe0a 	bl	8001108 <LCD_TearEffect>
  #define textHeight fontHeight
  #define textWidth  fontWidth * 13
  #define xMax 239
  #define yMax xMax

  int x = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  int y = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  int xSpeed = 4;
 80004fc:	2304      	movs	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
  int ySpeed = 2;
 8000500:	2302      	movs	r3, #2
 8000502:	60bb      	str	r3, [r7, #8]
  uint16_t color = 0x0000;
 8000504:	2300      	movs	r3, #0
 8000506:	80fb      	strh	r3, [r7, #6]

  UG_FontSetTransparency(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f004 fafb 	bl	8004b04 <UG_FontSetTransparency>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	      UG_DrawBMP(0, 0, &shuttle);
 800050e:	4a28      	ldr	r2, [pc, #160]	@ (80005b0 <main+0xe8>)
 8000510:	2100      	movs	r1, #0
 8000512:	2000      	movs	r0, #0
 8000514:	f005 fc32 	bl	8005d7c <UG_DrawBMP>
	  	  //UG_FillScreen(C_RED);

	  	  xSpeed = ((x + textWidth > xMax) || (x < 0))? -xSpeed : xSpeed;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	2ba1      	cmp	r3, #161	@ 0xa1
 800051c:	dc02      	bgt.n	8000524 <main+0x5c>
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2b00      	cmp	r3, #0
 8000522:	da02      	bge.n	800052a <main+0x62>
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	425b      	negs	r3, r3
 8000528:	e000      	b.n	800052c <main+0x64>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	60fb      	str	r3, [r7, #12]
	  	  ySpeed = ((y + textHeight > yMax) || (y < 0))? -ySpeed : ySpeed;
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	2be7      	cmp	r3, #231	@ 0xe7
 8000532:	dc02      	bgt.n	800053a <main+0x72>
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	2b00      	cmp	r3, #0
 8000538:	da02      	bge.n	8000540 <main+0x78>
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	425b      	negs	r3, r3
 800053e:	e000      	b.n	8000542 <main+0x7a>
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60bb      	str	r3, [r7, #8]

	  	  x = xMax < (x + textWidth)? xMax - textWidth : x;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	2ba1      	cmp	r3, #161	@ 0xa1
 8000548:	bfa8      	it	ge
 800054a:	23a1      	movge	r3, #161	@ 0xa1
 800054c:	617b      	str	r3, [r7, #20]
	  	  x = x < 0? 0 : x;
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000554:	617b      	str	r3, [r7, #20]
	  	  y = yMax < (y + textHeight)? yMax - textHeight : y;
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2be7      	cmp	r3, #231	@ 0xe7
 800055a:	bfa8      	it	ge
 800055c:	23e7      	movge	r3, #231	@ 0xe7
 800055e:	613b      	str	r3, [r7, #16]
	  	  y = y < 0? 0 : y;
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000566:	613b      	str	r3, [r7, #16]



	  	  t = UG_FontGetTransparency();
 8000568:	f004 fade 	bl	8004b28 <UG_FontGetTransparency>
 800056c:	4603      	mov	r3, r0
 800056e:	717b      	strb	r3, [r7, #5]

	  	  LCD_PutStr(x,y, "Space Shuttle", DEFAULT_FONT,color += 0b0101000101001010, C_BLACK);
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	b298      	uxth	r0, r3
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	b299      	uxth	r1, r3
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	f503 43a2 	add.w	r3, r3, #20736	@ 0x5100
 800057e:	334a      	adds	r3, #74	@ 0x4a
 8000580:	80fb      	strh	r3, [r7, #6]
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <main+0xec>)
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <main+0xf0>)
 800058e:	f000 fd9b 	bl	80010c8 <LCD_PutStr>
	  	  UG_FontSetTransparency(t);
 8000592:	797b      	ldrb	r3, [r7, #5]
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fab5 	bl	8004b04 <UG_FontSetTransparency>

	  	  x += xSpeed;
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4413      	add	r3, r2
 80005a0:	617b      	str	r3, [r7, #20]
	  	  y += ySpeed;
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4413      	add	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]

	      UG_Update();
 80005aa:	f005 fb25 	bl	8005bf8 <UG_Update>
	      UG_DrawBMP(0, 0, &shuttle);
 80005ae:	e7ae      	b.n	800050e <main+0x46>
 80005b0:	20000004 	.word	0x20000004
 80005b4:	08022578 	.word	0x08022578
 80005b8:	080062fc 	.word	0x080062fc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fe5e 	bl	800628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000630:	23c8      	movs	r3, #200	@ 0xc8
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 ffb9 	bl	80025b8 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f9a0 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2103      	movs	r1, #3
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fa1b 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 f98a 	bl	8000990 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <MX_ADC1_Init+0x9c>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <MX_ADC1_Init+0xa0>)
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006da:	2201      	movs	r2, #1
 80006dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ec:	480d      	ldr	r0, [pc, #52]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ee:	f000 fe31 	bl	8001354 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f94a 	bl	8000990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_ADC1_Init+0x98>)
 800070e:	f000 fe65 	bl	80013dc <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 f93a 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000044 	.word	0x20000044
 8000728:	40012000 	.word	0x40012000
 800072c:	0f000001 	.word	0x0f000001

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_SPI1_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_SPI1_Init+0x68>)
 800073c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_SPI1_Init+0x68>)
 800074a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000752:	2202      	movs	r2, #2
 8000754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_SPI1_Init+0x68>)
 800075e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_SPI1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_SPI1_Init+0x68>)
 800077e:	220a      	movs	r2, #10
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_SPI1_Init+0x68>)
 8000784:	f002 fb70 	bl	8002e68 <HAL_SPI_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800078e:	f000 f8ff 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_USART1_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d8:	f002 ff40 	bl	800365c <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8d5 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000144 	.word	0x20000144
 80007f0:	40011000 	.word	0x40011000

080007f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_DMA_Init+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <MX_DMA_Init+0x3c>)
 8000804:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_DMA_Init+0x3c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	203a      	movs	r0, #58	@ 0x3a
 800081c:	f001 f8e7 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000820:	203a      	movs	r0, #58	@ 0x3a
 8000822:	f001 f900 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b4c      	ldr	r3, [pc, #304]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a4b      	ldr	r2, [pc, #300]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b49      	ldr	r3, [pc, #292]	@ (8000980 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b45      	ldr	r3, [pc, #276]	@ (8000980 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a44      	ldr	r2, [pc, #272]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b42      	ldr	r3, [pc, #264]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b3e      	ldr	r3, [pc, #248]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <MX_GPIO_Init+0x14c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a36      	ldr	r2, [pc, #216]	@ (8000980 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	4830      	ldr	r0, [pc, #192]	@ (8000984 <MX_GPIO_Init+0x150>)
 80008c2:	f001 fe5f 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2107      	movs	r1, #7
 80008ca:	482f      	ldr	r0, [pc, #188]	@ (8000988 <MX_GPIO_Init+0x154>)
 80008cc:	f001 fe5a 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4826      	ldr	r0, [pc, #152]	@ (8000984 <MX_GPIO_Init+0x150>)
 80008ea:	f001 fcc7 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4822      	ldr	r0, [pc, #136]	@ (800098c <MX_GPIO_Init+0x158>)
 8000902:	f001 fcbb 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000906:	2307      	movs	r3, #7
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	481a      	ldr	r0, [pc, #104]	@ (8000988 <MX_GPIO_Init+0x154>)
 800091e:	f001 fcad 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_SCL_Pin B7_SDA_Pin */
  GPIO_InitStruct.Pin = B6_SCL_Pin|B7_SDA_Pin;
 8000922:	23c0      	movs	r3, #192	@ 0xc0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000932:	2304      	movs	r3, #4
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_GPIO_Init+0x154>)
 800093e:	f001 fc9d 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : B8_Pin */
  GPIO_InitStruct.Pin = B8_Pin;
 8000942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B8_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_GPIO_Init+0x154>)
 8000958:	f001 fc90 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_Pin;
 800095c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAME_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_GPIO_Init+0x154>)
 8000972:	f001 fc83 	bl	800227c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020400 	.word	0x40020400
 800098c:	40020000 	.word	0x40020000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d127      	bne.n	8000a5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a15      	ldr	r2, [pc, #84]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_ADC_MspInit+0x80>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = POT1_Pin;
 8000a46:	2302      	movs	r3, #2
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_ADC_MspInit+0x84>)
 8000a5a:	f001 fc0f 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012000 	.word	0x40012000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a30      	ldr	r2, [pc, #192]	@ (8000b54 <HAL_SPI_MspInit+0xe0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d159      	bne.n	8000b4a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a27      	ldr	r2, [pc, #156]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <HAL_SPI_MspInit+0xe4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ace:	23a0      	movs	r3, #160	@ 0xa0
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481c      	ldr	r0, [pc, #112]	@ (8000b5c <HAL_SPI_MspInit+0xe8>)
 8000aea:	f001 fbc7 	bl	800227c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000af0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b64 <HAL_SPI_MspInit+0xf0>)
 8000af2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000af6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000afe:	2240      	movs	r2, #64	@ 0x40
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b2e:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b30:	f000 ff94 	bl	8001a5c <HAL_DMA_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000b3a:	f7ff ff29 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b42:	649a      	str	r2, [r3, #72]	@ 0x48
 8000b44:	4a06      	ldr	r2, [pc, #24]	@ (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40013000 	.word	0x40013000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	200000e4 	.word	0x200000e4
 8000b64:	40026440 	.word	0x40026440

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	@ (8000bfc <HAL_UART_MspInit+0x94>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d134      	bne.n	8000bf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_UART_MspInit+0x98>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <HAL_UART_MspInit+0x9c>)
 8000be0:	f001 fb4c 	bl	800227c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2025      	movs	r0, #37	@ 0x25
 8000bea:	f000 ff00 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bee:	2025      	movs	r0, #37	@ 0x25
 8000bf0:	f000 ff19 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 fb35 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <USART1_IRQHandler+0x10>)
 8000c6e:	f002 fd45 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000144 	.word	0x20000144

08000c7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <DMA2_Stream2_IRQHandler+0x10>)
 8000c82:	f001 f883 	bl	8001d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000e4 	.word	0x200000e4

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f005 fadb 	bl	800629c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fbef 	bl	80004c8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000cf8:	08022db0 	.word	0x08022db0
  ldr r2, =_sbss
 8000cfc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d00:	2001c420 	.word	0x2001c420

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <setSPI_Size+0x74>)
 8000d14:	f993 3000 	ldrsb.w	r3, [r3]
 8000d18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d026      	beq.n	8000d6e <setSPI_Size+0x66>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <setSPI_Size+0x78>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <setSPI_Size+0x78>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d2e:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <setSPI_Size+0x74>)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10c      	bne.n	8000d58 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <setSPI_Size+0x78>)
 8000d40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d44:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <setSPI_Size+0x78>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <setSPI_Size+0x78>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d54:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8000d56:	e00a      	b.n	8000d6e <setSPI_Size+0x66>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <setSPI_Size+0x78>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <setSPI_Size+0x78>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <setSPI_Size+0x78>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	2000008c 	.word	0x2000008c

08000d84 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8000d94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffb5 	bl	8000d08 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8000d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e94 <setDMAMemMode+0x110>)
 8000da0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000da4:	461a      	mov	r2, r3
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d106      	bne.n	8000dba <setDMAMemMode+0x36>
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <setDMAMemMode+0x110>)
 8000dae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000db2:	461a      	mov	r2, r3
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d067      	beq.n	8000e8a <setDMAMemMode+0x106>
    config.dma_sz =size;
 8000dba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000dbe:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <setDMAMemMode+0x110>)
 8000dc0:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8000dc2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <setDMAMemMode+0x110>)
 8000dc8:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <setDMAMemMode+0x114>)
 8000dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <setDMAMemMode+0x114>)
 8000dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dde:	bf00      	nop
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <setDMAMemMode+0x114>)
 8000de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f7      	bne.n	8000de0 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d10f      	bne.n	8000e16 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <setDMAMemMode+0x114>)
 8000df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfe:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e00d      	b.n	8000e32 <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e30:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d116      	bne.n	8000e66 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e40:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4a:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 5220 	orr.w	r2, r2, #10240	@ 0x2800
 8000e62:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8000e64:	e011      	b.n	8000e8a <setDMAMemMode+0x106>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <setDMAMemMode+0x114>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000010 	.word	0x20000010
 8000e98:	2000008c 	.word	0x2000008c

08000e9c <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ff2d 	bl	8000d08 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <LCD_WriteCommand+0x50>)
 8000eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eb4:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	2201      	movs	r2, #1
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LCD_WriteCommand+0x54>)
 8000ec0:	f002 f85b 	bl	8002f7a <HAL_SPI_Transmit>
  if(argc){
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <LCD_WriteCommand+0x46>
    LCD_PIN(LCD_DC,SET);
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <LCD_WriteCommand+0x50>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1c59      	adds	r1, r3, #1
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <LCD_WriteCommand+0x54>)
 8000ede:	f002 f84c 	bl	8002f7a <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <LCD_WriteData+0xb8>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	619a      	str	r2, [r3, #24]
  LCD_PIN(LCD_CS,RESET);
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8000f04:	e049      	b.n	8000f9a <LCD_WriteData+0xa6>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	bf28      	it	cs
 8000f10:	4613      	movcs	r3, r2
 8000f12:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b40      	cmp	r3, #64	@ 0x40
 8000f18:	d924      	bls.n	8000f64 <LCD_WriteData+0x70>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4823      	ldr	r0, [pc, #140]	@ (8000fb0 <LCD_WriteData+0xbc>)
 8000f22:	f002 f96d 	bl	8003200 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8000f26:	bf00      	nop
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <LCD_WriteData+0xbc>)
 8000f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f8b7 	bl	80020a0 <HAL_DMA_GetState>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1f7      	bne.n	8000f28 <LCD_WriteData+0x34>
      if(config.dma_mem_inc==mem_increase){
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <LCD_WriteData+0xc0>)
 8000f3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d127      	bne.n	8000f92 <LCD_WriteData+0x9e>
        if(config.dma_sz==mode_16bit)
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <LCD_WriteData+0xc0>)
 8000f44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d104      	bne.n	8000f56 <LCD_WriteData+0x62>
          buff += chunk_size;
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	e01d      	b.n	8000f92 <LCD_WriteData+0x9e>
        else
          buff += chunk_size*2;
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e016      	b.n	8000f92 <LCD_WriteData+0x9e>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8000f64:	89fa      	ldrh	r2, [r7, #14]
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <LCD_WriteData+0xbc>)
 8000f6e:	f002 f804 	bl	8002f7a <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <LCD_WriteData+0xc0>)
 8000f74:	f993 3000 	ldrsb.w	r3, [r3]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d104      	bne.n	8000f86 <LCD_WriteData+0x92>
        buff += chunk_size;
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	e005      	b.n	8000f92 <LCD_WriteData+0x9e>
      else
        buff += chunk_size*2;
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1b2      	bne.n	8000f06 <LCD_WriteData+0x12>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	2000008c 	.word	0x2000008c
 8000fb4:	20000010 	.word	0x20000010

08000fb8 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b08b      	sub	sp, #44	@ 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000fe2:	883b      	ldrh	r3, [r7, #0]
 8000fe4:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8000fe6:	232a      	movs	r3, #42	@ 0x2a
 8000fe8:	763b      	strb	r3, [r7, #24]
 8000fea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fee:	121b      	asrs	r3, r3, #8
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	767b      	strb	r3, [r7, #25]
 8000ff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	76bb      	strb	r3, [r7, #26]
 8000ffc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001000:	121b      	asrs	r3, r3, #8
 8001002:	b21b      	sxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	76fb      	strb	r3, [r7, #27]
 8001008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800100a:	b2db      	uxtb	r3, r3
 800100c:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	2104      	movs	r1, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff41 	bl	8000e9c <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800101a:	232b      	movs	r3, #43	@ 0x2b
 800101c:	743b      	strb	r3, [r7, #16]
 800101e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001022:	121b      	asrs	r3, r3, #8
 8001024:	b21b      	sxth	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	747b      	strb	r3, [r7, #17]
 800102a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800102c:	b2db      	uxtb	r3, r3
 800102e:	74bb      	strb	r3, [r7, #18]
 8001030:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001034:	121b      	asrs	r3, r3, #8
 8001036:	b21b      	sxth	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	74fb      	strb	r3, [r7, #19]
 800103c:	8c3b      	ldrh	r3, [r7, #32]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2104      	movs	r1, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff27 	bl	8000e9c <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800104e:	232c      	movs	r3, #44	@ 0x2c
 8001050:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff1f 	bl	8000e9c <LCD_WriteCommand>
  }
}
 800105e:	bf00      	nop
 8001060:	372c      	adds	r7, #44	@ 0x2c
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}
	...

08001068 <LCD_DrawPixelFB>:
#endif
}

#ifdef LCD_LOCAL_FB
void LCD_DrawPixelFB(int16_t x, int16_t y, uint16_t color)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x >= LCD_WIDTH) ||
 800107a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db19      	blt.n	80010b6 <LCD_DrawPixelFB+0x4e>
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	2bef      	cmp	r3, #239	@ 0xef
 8001088:	dc15      	bgt.n	80010b6 <LCD_DrawPixelFB+0x4e>
 800108a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db11      	blt.n	80010b6 <LCD_DrawPixelFB+0x4e>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 8001092:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001096:	2bef      	cmp	r3, #239	@ 0xef
 8001098:	dc0d      	bgt.n	80010b6 <LCD_DrawPixelFB+0x4e>

  fb[x+(y*LCD_WIDTH)] = color;
 800109a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800109e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	440b      	add	r3, r1
 80010ac:	4905      	ldr	r1, [pc, #20]	@ (80010c4 <LCD_DrawPixelFB+0x5c>)
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80010b4:	e000      	b.n	80010b8 <LCD_DrawPixelFB+0x50>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 80010b6:	bf00      	nop
}
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000018c 	.word	0x2000018c

080010c8 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60ba      	str	r2, [r7, #8]
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4603      	mov	r3, r0
 80010d4:	81fb      	strh	r3, [r7, #14]
 80010d6:	460b      	mov	r3, r1
 80010d8:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f003 fa8e 	bl	80045fc <UG_FontSelect>
  UG_SetForecolor(color);
 80010e0:	8b3b      	ldrh	r3, [r7, #24]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fcc2 	bl	8004a6c <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80010e8:	8bbb      	ldrh	r3, [r7, #28]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fcd0 	bl	8004a90 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80010f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fc1e 	bl	800493c <UG_PutString>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <LCD_TearEffect>:
 * @brief Open/Close tearing effect line
 * @param tear -> Whether to tear
 * @return none
 */
void LCD_TearEffect(uint8_t tear)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <LCD_TearEffect+0x14>
 8001118:	2335      	movs	r3, #53	@ 0x35
 800111a:	e000      	b.n	800111e <LCD_TearEffect+0x16>
 800111c:	2334      	movs	r3, #52	@ 0x34
 800111e:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff feb8 	bl	8000e9c <LCD_WriteCommand>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <LCD_setPower>:

void LCD_setPower(uint8_t power)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <LCD_setPower+0x14>
 8001144:	2329      	movs	r3, #41	@ 0x29
 8001146:	e000      	b.n	800114a <LCD_setPower+0x16>
 8001148:	2328      	movs	r3, #40	@ 0x28
 800114a:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fea2 	bl	8000e9c <LCD_WriteCommand>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <LCD_Update>:

static void LCD_Update(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
#ifdef LCD_LOCAL_FB
  setSPI_Size(mode_8bit);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fdcf 	bl	8000d08 <setSPI_Size>
  LCD_SetAddressWindow(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 800116a:	23ef      	movs	r3, #239	@ 0xef
 800116c:	22ef      	movs	r2, #239	@ 0xef
 800116e:	2100      	movs	r1, #0
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff21 	bl	8000fb8 <LCD_SetAddressWindow>
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001176:	2101      	movs	r1, #1
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fe03 	bl	8000d84 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
 800117e:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8001182:	4804      	ldr	r0, [pc, #16]	@ (8001194 <LCD_Update+0x34>)
 8001184:	f7ff feb6 	bl	8000ef4 <LCD_WriteData>
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001188:	2100      	movs	r1, #0
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fdfa 	bl	8000d84 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000018c 	.word	0x2000018c

08001198 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <LCD_init+0x80>)
 80011a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011a4:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f8b0 	bl	800130c <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <LCD_init+0x80>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 80011b2:	20c8      	movs	r0, #200	@ 0xc8
 80011b4:	f000 f8aa 	bl	800130c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80011b8:	4918      	ldr	r1, [pc, #96]	@ (800121c <LCD_init+0x84>)
 80011ba:	4819      	ldr	r0, [pc, #100]	@ (8001220 <LCD_init+0x88>)
 80011bc:	f003 f984 	bl	80044c8 <UG_Init>
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
#endif
  UG_FontSetHSpace(0);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f003 fc77 	bl	8004ab4 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f003 fc88 	bl	8004adc <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80011cc:	2300      	movs	r3, #0
 80011ce:	80fb      	strh	r3, [r7, #6]
 80011d0:	e013      	b.n	80011fa <LCD_init+0x62>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <LCD_init+0x8c>)
 80011d8:	441a      	add	r2, r3
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4911      	ldr	r1, [pc, #68]	@ (8001224 <LCD_init+0x8c>)
 80011de:	5ccb      	ldrb	r3, [r1, r3]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7ff fe5a 	bl	8000e9c <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <LCD_init+0x8c>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	461a      	mov	r2, r3
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3302      	adds	r3, #2
 80011f8:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	2b4b      	cmp	r3, #75	@ 0x4b
 80011fe:	d9e8      	bls.n	80011d2 <LCD_init+0x3a>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001200:	2000      	movs	r0, #0
 8001202:	f003 fa0b 	bl	800461c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ff94 	bl	8001134 <LCD_setPower>
  UG_Update();
 800120c:	f004 fcf4 	bl	8005bf8 <UG_Update>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400
 800121c:	20000014 	.word	0x20000014
 8001220:	2001c38c 	.word	0x2001c38c
 8001224:	08022524 	.word	0x08022524

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 fbc1 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fb9e 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fbd9 	bl	8001a42 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 fba1 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000024 	.word	0x20000024
 80012c8:	20000020 	.word	0x20000020

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000024 	.word	0x20000024
 80012f0:	2001c400 	.word	0x2001c400

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2001c400 	.word	0x2001c400

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000024 	.word	0x20000024

08001354 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e033      	b.n	80013d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fb3a 	bl	80009ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	f043 0202 	orr.w	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f94a 	bl	8001640 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c2:	e001      	b.n	80013c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1c>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e113      	b.n	8001620 <HAL_ADC_ConfigChannel+0x244>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b09      	cmp	r3, #9
 8001406:	d925      	bls.n	8001454 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68d9      	ldr	r1, [r3, #12]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	3b1e      	subs	r3, #30
 800141e:	2207      	movs	r2, #7
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43da      	mvns	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	400a      	ands	r2, r1
 800142c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68d9      	ldr	r1, [r3, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	4603      	mov	r3, r0
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4403      	add	r3, r0
 8001446:	3b1e      	subs	r3, #30
 8001448:	409a      	lsls	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	e022      	b.n	800149a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	2207      	movs	r2, #7
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	400a      	ands	r2, r1
 8001476:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6919      	ldr	r1, [r3, #16]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	4603      	mov	r3, r0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4403      	add	r3, r0
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d824      	bhi.n	80014ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	3b05      	subs	r3, #5
 80014b4:	221f      	movs	r2, #31
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	400a      	ands	r2, r1
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	3b05      	subs	r3, #5
 80014de:	fa00 f203 	lsl.w	r2, r0, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ea:	e04c      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d824      	bhi.n	800153e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b23      	subs	r3, #35	@ 0x23
 8001506:	221f      	movs	r2, #31
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43da      	mvns	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	400a      	ands	r2, r1
 8001514:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b23      	subs	r3, #35	@ 0x23
 8001530:	fa00 f203 	lsl.w	r2, r0, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
 800153c:	e023      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b41      	subs	r3, #65	@ 0x41
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b41      	subs	r3, #65	@ 0x41
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <HAL_ADC_ConfigChannel+0x250>)
 8001588:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_ADC_ConfigChannel+0x254>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10f      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1d8>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b12      	cmp	r3, #18
 800159a:	d10b      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_ADC_ConfigChannel+0x254>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x23a>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <HAL_ADC_ConfigChannel+0x258>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d003      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x1f4>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b11      	cmp	r3, #17
 80015ce:	d122      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <HAL_ADC_ConfigChannel+0x258>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d111      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_ADC_ConfigChannel+0x25c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_ADC_ConfigChannel+0x260>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9a      	lsrs	r2, r3, #18
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001608:	e002      	b.n	8001610 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40012300 	.word	0x40012300
 8001630:	40012000 	.word	0x40012000
 8001634:	10000012 	.word	0x10000012
 8001638:	20000000 	.word	0x20000000
 800163c:	431bde83 	.word	0x431bde83

08001640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001648:	4b79      	ldr	r3, [pc, #484]	@ (8001830 <ADC_Init+0x1f0>)
 800164a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	431a      	orrs	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	021a      	lsls	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d2:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <ADC_Init+0x1f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	e00f      	b.n	800173e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800173c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0202 	bic.w	r2, r2, #2
 800174c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6899      	ldr	r1, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	005a      	lsls	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800177a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800178a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6859      	ldr	r1, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	3b01      	subs	r3, #1
 8001798:	035a      	lsls	r2, r3, #13
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	e007      	b.n	80017b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	051a      	lsls	r2, r3, #20
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017f6:	025a      	lsls	r2, r3, #9
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800180e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	029a      	lsls	r2, r3, #10
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40012300 	.word	0x40012300
 8001834:	0f000001 	.word	0x0f000001

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fc44 	bl	80012f4 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fc2b 	bl	80012f4 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fb0f 	bl	8002184 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fac6 	bl	8002118 <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	223f      	movs	r2, #63	@ 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f010803f 	.word	0xf010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e040      	b.n	8001c60 <HAL_DMA_Start_IT+0xa8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d12f      	bne.n	8001c52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fa58 	bl	80020bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff fb3d 	bl	80012f4 <HAL_GetTick>
 8001c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e052      	b.n	8001d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0216 	bic.w	r2, r2, #22
 8001ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <HAL_DMA_Abort+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0208 	bic.w	r2, r2, #8
 8001cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	e013      	b.n	8001d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cec:	f7ff fb02 	bl	80012f4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d90c      	bls.n	8001d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e015      	b.n	8001d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e4      	bne.n	8001cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	223f      	movs	r2, #63	@ 0x3f
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00c      	b.n	8001d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d98:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd4 <HAL_DMA_IRQHandler+0x248>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8001fd8 <HAL_DMA_IRQHandler+0x24c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2208      	movs	r2, #8
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	2208      	movs	r2, #8
 8001de6:	409a      	lsls	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	2204      	movs	r2, #4
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2204      	movs	r2, #4
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2210      	movs	r2, #16
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d043      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03c      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	2210      	movs	r2, #16
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d024      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
 8001eba:	e01f      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2220      	movs	r2, #32
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808f 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8087 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	2220      	movs	r2, #32
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d136      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0216 	bic.w	r2, r2, #22
 8001f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x1da>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0208 	bic.w	r2, r2, #8
 8001f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	223f      	movs	r2, #63	@ 0x3f
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d07e      	beq.n	8002098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
        }
        return;
 8001fa2:	e079      	b.n	8002098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e02c      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e01e      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10f      	bne.n	800201c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0210 	bic.w	r2, r2, #16
 800200a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d032      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d022      	beq.n	8002086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2205      	movs	r2, #5
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3301      	adds	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	d307      	bcc.n	8002074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f2      	bne.n	8002058 <HAL_DMA_IRQHandler+0x2cc>
 8002072:	e000      	b.n	8002076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	e000      	b.n	800209a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002098:	bf00      	nop
    }
  }
}
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ae:	b2db      	uxtb	r3, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b40      	cmp	r3, #64	@ 0x40
 80020e8:	d108      	bne.n	80020fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020fa:	e007      	b.n	800210c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3b10      	subs	r3, #16
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <DMA_CalcBaseAndBitshift+0x64>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002132:	4a13      	ldr	r2, [pc, #76]	@ (8002180 <DMA_CalcBaseAndBitshift+0x68>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d909      	bls.n	800215a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	1d1a      	adds	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	659a      	str	r2, [r3, #88]	@ 0x58
 8002158:	e007      	b.n	800216a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	aaaaaaab 	.word	0xaaaaaaab
 8002180:	08022570 	.word	0x08022570

08002184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11f      	bne.n	80021de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d856      	bhi.n	8002252 <DMA_CheckFifoParam+0xce>
 80021a4:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <DMA_CheckFifoParam+0x28>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021cf 	.word	0x080021cf
 80021b4:	080021bd 	.word	0x080021bd
 80021b8:	08002253 	.word	0x08002253
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d046      	beq.n	8002256 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e043      	b.n	8002256 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021d6:	d140      	bne.n	800225a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021dc:	e03d      	b.n	800225a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e6:	d121      	bne.n	800222c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d837      	bhi.n	800225e <DMA_CheckFifoParam+0xda>
 80021ee:	a201      	add	r2, pc, #4	@ (adr r2, 80021f4 <DMA_CheckFifoParam+0x70>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002205 	.word	0x08002205
 80021f8:	0800220b 	.word	0x0800220b
 80021fc:	08002205 	.word	0x08002205
 8002200:	0800221d 	.word	0x0800221d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      break;
 8002208:	e030      	b.n	800226c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d025      	beq.n	8002262 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221a:	e022      	b.n	8002262 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002224:	d11f      	bne.n	8002266 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800222a:	e01c      	b.n	8002266 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d903      	bls.n	800223a <DMA_CheckFifoParam+0xb6>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d003      	beq.n	8002240 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002238:	e018      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      break;
 800223e:	e015      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00e      	beq.n	800226a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	e00b      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 8002252:	bf00      	nop
 8002254:	e00a      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
 8002258:	e008      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
 800225c:	e006      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
 8002260:	e004      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e002      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;   
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
    }
  } 
  
  return status; 
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e159      	b.n	800254c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f040 8148 	bne.w	8002546 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d130      	bne.n	8002330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 0201 	and.w	r2, r3, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b03      	cmp	r3, #3
 800233a:	d017      	beq.n	800236c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d123      	bne.n	80023c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a2 	beq.w	8002546 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <HAL_GPIO_Init+0x2e8>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <HAL_GPIO_Init+0x2e8>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b54      	ldr	r3, [pc, #336]	@ (8002564 <HAL_GPIO_Init+0x2e8>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241e:	4a52      	ldr	r2, [pc, #328]	@ (8002568 <HAL_GPIO_Init+0x2ec>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a49      	ldr	r2, [pc, #292]	@ (800256c <HAL_GPIO_Init+0x2f0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x202>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a48      	ldr	r2, [pc, #288]	@ (8002570 <HAL_GPIO_Init+0x2f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x1fe>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a47      	ldr	r2, [pc, #284]	@ (8002574 <HAL_GPIO_Init+0x2f8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x1fa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a46      	ldr	r2, [pc, #280]	@ (8002578 <HAL_GPIO_Init+0x2fc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x1f6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a45      	ldr	r2, [pc, #276]	@ (800257c <HAL_GPIO_Init+0x300>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x1f2>
 800246a:	2304      	movs	r3, #4
 800246c:	e008      	b.n	8002480 <HAL_GPIO_Init+0x204>
 800246e:	2307      	movs	r3, #7
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x204>
 8002472:	2303      	movs	r3, #3
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x204>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x204>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x204>
 800247e:	2300      	movs	r3, #0
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f002 0203 	and.w	r2, r2, #3
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4093      	lsls	r3, r2
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002490:	4935      	ldr	r1, [pc, #212]	@ (8002568 <HAL_GPIO_Init+0x2ec>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_GPIO_Init+0x304>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002580 <HAL_GPIO_Init+0x304>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_GPIO_Init+0x304>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ec:	4a24      	ldr	r2, [pc, #144]	@ (8002580 <HAL_GPIO_Init+0x304>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f2:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <HAL_GPIO_Init+0x304>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002516:	4a1a      	ldr	r2, [pc, #104]	@ (8002580 <HAL_GPIO_Init+0x304>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251c:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_GPIO_Init+0x304>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002540:	4a0f      	ldr	r2, [pc, #60]	@ (8002580 <HAL_GPIO_Init+0x304>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	f67f aea2 	bls.w	8002298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40013800 	.word	0x40013800
 800256c:	40020000 	.word	0x40020000
 8002570:	40020400 	.word	0x40020400
 8002574:	40020800 	.word	0x40020800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021000 	.word	0x40021000
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e267      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d075      	beq.n	80026c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	4b88      	ldr	r3, [pc, #544]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00c      	beq.n	80025fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b85      	ldr	r3, [pc, #532]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d112      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025fa:	d10b      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b7e      	ldr	r3, [pc, #504]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05b      	beq.n	80026c0 <HAL_RCC_OscConfig+0x108>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d157      	bne.n	80026c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e242      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x74>
 800261e:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x98>
 8002636:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6f      	ldr	r2, [pc, #444]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6d      	ldr	r3, [pc, #436]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6c      	ldr	r2, [pc, #432]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 8002650:	4b69      	ldr	r3, [pc, #420]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a68      	ldr	r2, [pc, #416]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fe40 	bl	80012f4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fe3c 	bl	80012f4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	@ 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e207      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b5b      	ldr	r3, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xc0>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fe2c 	bl	80012f4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fe28 	bl	80012f4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	@ 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1f3      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b51      	ldr	r3, [pc, #324]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0xe8>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b44      	ldr	r3, [pc, #272]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1c7      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4937      	ldr	r1, [pc, #220]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x244>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fde1 	bl	80012f4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fddd 	bl	80012f4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1a8      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b2b      	ldr	r3, [pc, #172]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4925      	ldr	r1, [pc, #148]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_RCC_OscConfig+0x244>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fdc0 	bl	80012f4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe fdbc 	bl	80012f4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e187      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d036      	beq.n	8002810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_RCC_OscConfig+0x248>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fda0 	bl	80012f4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fd9c 	bl	80012f4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e167      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x200>
 80027d6:	e01b      	b.n	8002810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_RCC_OscConfig+0x248>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe fd89 	bl	80012f4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	e00e      	b.n	8002804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe fd85 	bl	80012f4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d907      	bls.n	8002804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e150      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	42470000 	.word	0x42470000
 8002800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b88      	ldr	r3, [pc, #544]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ea      	bne.n	80027e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8097 	beq.w	800294c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b81      	ldr	r3, [pc, #516]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b7d      	ldr	r3, [pc, #500]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	4a7c      	ldr	r2, [pc, #496]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	@ 0x40
 800283e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b77      	ldr	r3, [pc, #476]	@ (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b74      	ldr	r3, [pc, #464]	@ (8002a2c <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a73      	ldr	r2, [pc, #460]	@ (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe fd45 	bl	80012f4 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7fe fd41 	bl	80012f4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e10c      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b6a      	ldr	r3, [pc, #424]	@ (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2ea>
 8002894:	4b64      	ldr	r3, [pc, #400]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	4a63      	ldr	r2, [pc, #396]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x324>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x30c>
 80028aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x324>
 80028c4:	4b58      	ldr	r3, [pc, #352]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c8:	4a57      	ldr	r2, [pc, #348]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d0:	4b55      	ldr	r3, [pc, #340]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	4a54      	ldr	r2, [pc, #336]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe fd06 	bl	80012f4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe fd02 	bl	80012f4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0cb      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ee      	beq.n	80028ec <HAL_RCC_OscConfig+0x334>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7fe fcf0 	bl	80012f4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe fcec 	bl	80012f4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0b5      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ee      	bne.n	8002918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	4a38      	ldr	r2, [pc, #224]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a1 	beq.w	8002a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002956:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d05c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d141      	bne.n	80029ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <HAL_RCC_OscConfig+0x478>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fcc0 	bl	80012f4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fcbc 	bl	80012f4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e087      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	491b      	ldr	r1, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x478>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fc95 	bl	80012f4 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fc91 	bl	80012f4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e05c      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x416>
 80029ec:	e054      	b.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc7e 	bl	80012f4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fc7a 	bl	80012f4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e045      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x444>
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e038      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ec>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d028      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d121      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0cc      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b68      	ldr	r3, [pc, #416]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b65      	ldr	r3, [pc, #404]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a52      	ldr	r2, [pc, #328]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d044      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d119      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	4b3b      	ldr	r3, [pc, #236]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e067      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4934      	ldr	r1, [pc, #208]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fbac 	bl	80012f4 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fe fba8 	bl	80012f4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e04f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20c      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	@ (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fb0c 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	0800630c 	.word	0x0800630c
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000020 	.word	0x20000020

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c78:	b090      	sub	sp, #64	@ 0x40
 8002c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c84:	2300      	movs	r3, #0
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8c:	4b59      	ldr	r3, [pc, #356]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	f200 80a1 	bhi.w	8002de0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ca6:	e09b      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002cac:	e09b      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cae:	4b53      	ldr	r3, [pc, #332]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cb2:	e098      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cca:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	099b      	lsrs	r3, r3, #6
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4b47      	ldr	r3, [pc, #284]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce0:	fb03 f201 	mul.w	r2, r3, r1
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	4a43      	ldr	r2, [pc, #268]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cee:	fba0 1202 	umull	r1, r2, r0, r2
 8002cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf4:	460a      	mov	r2, r1
 8002cf6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfa:	4413      	add	r3, r2
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	2200      	movs	r2, #0
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	61fa      	str	r2, [r7, #28]
 8002d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d0e:	f7fd fa63 	bl	80001d8 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4613      	mov	r3, r2
 8002d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1a:	e053      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	617a      	str	r2, [r7, #20]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d2e:	f04f 0b00 	mov.w	fp, #0
 8002d32:	4652      	mov	r2, sl
 8002d34:	465b      	mov	r3, fp
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0159      	lsls	r1, r3, #5
 8002d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d44:	0150      	lsls	r0, r2, #5
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d66:	ebb2 0408 	subs.w	r4, r2, r8
 8002d6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	00eb      	lsls	r3, r5, #3
 8002d78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7c:	00e2      	lsls	r2, r4, #3
 8002d7e:	4614      	mov	r4, r2
 8002d80:	461d      	mov	r5, r3
 8002d82:	eb14 030a 	adds.w	r3, r4, sl
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	eb45 030b 	adc.w	r3, r5, fp
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	028b      	lsls	r3, r1, #10
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da4:	4621      	mov	r1, r4
 8002da6:	028a      	lsls	r2, r1, #10
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	2200      	movs	r2, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	60fa      	str	r2, [r7, #12]
 8002db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db8:	f7fd fa0e 	bl	80001d8 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002dd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002de2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3740      	adds	r7, #64	@ 0x40
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	017d7840 	.word	0x017d7840

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800631c 	.word	0x0800631c

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0b5b      	lsrs	r3, r3, #13
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	@ (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	0800631c 	.word	0x0800631c

08002e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07b      	b.n	8002f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e8a:	d009      	beq.n	8002ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
 8002e92:	e005      	b.n	8002ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fdda 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0104 	and.w	r1, r3, #4
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	f003 0210 	and.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_SPI_Transmit+0x22>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e12d      	b.n	80031f8 <HAL_SPI_Transmit+0x27e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fa4:	f7fe f9a6 	bl	80012f4 <HAL_GetTick>
 8002fa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fbe:	e116      	b.n	80031ee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Transmit+0x52>
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd0:	e10d      	b.n	80031ee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003018:	d10f      	bne.n	800303a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003038:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d007      	beq.n	8003058 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003060:	d14f      	bne.n	8003102 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0xf6>
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d142      	bne.n	80030f6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003094:	e02f      	b.n	80030f6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d112      	bne.n	80030ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	881a      	ldrh	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	1c9a      	adds	r2, r3, #2
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030c8:	e015      	b.n	80030f6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ca:	f7fe f913 	bl	80012f4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d803      	bhi.n	80030e2 <HAL_SPI_Transmit+0x168>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Transmit+0x16e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030f4:	e07b      	b.n	80031ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ca      	bne.n	8003096 <HAL_SPI_Transmit+0x11c>
 8003100:	e050      	b.n	80031a4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Transmit+0x196>
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d144      	bne.n	800319a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003136:	e030      	b.n	800319a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d113      	bne.n	800316e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800316c:	e015      	b.n	800319a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316e:	f7fe f8c1 	bl	80012f4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d803      	bhi.n	8003186 <HAL_SPI_Transmit+0x20c>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d102      	bne.n	800318c <HAL_SPI_Transmit+0x212>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003198:	e029      	b.n	80031ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1c9      	bne.n	8003138 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa03 	bl	80035b4 <SPI_EndRxTxTransaction>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e003      	b.n	80031ee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_SPI_Transmit_DMA+0x20>
 800321c:	2302      	movs	r3, #2
 800321e:	e097      	b.n	8003350 <HAL_SPI_Transmit_DMA+0x150>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003234:	2302      	movs	r3, #2
 8003236:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003238:	e085      	b.n	8003346 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_SPI_Transmit_DMA+0x46>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800324a:	e07c      	b.n	8003346 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003292:	d10f      	bne.n	80032b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	4a27      	ldr	r2, [pc, #156]	@ (8003358 <HAL_SPI_Transmit_DMA+0x158>)
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c0:	4a26      	ldr	r2, [pc, #152]	@ (800335c <HAL_SPI_Transmit_DMA+0x15c>)
 80032c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c8:	4a25      	ldr	r2, [pc, #148]	@ (8003360 <HAL_SPI_Transmit_DMA+0x160>)
 80032ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	2200      	movs	r2, #0
 80032d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	4619      	mov	r1, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032ec:	f7fe fc64 	bl	8001bb8 <HAL_DMA_Start_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003306:	e01e      	b.n	8003346 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d007      	beq.n	8003326 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0202 	orr.w	r2, r2, #2
 8003344:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08003449 	.word	0x08003449
 800335c:	080033a1 	.word	0x080033a1
 8003360:	08003465 	.word	0x08003465

08003364 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ae:	f7fd ffa1 	bl	80012f4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c2:	d03b      	beq.n	800343c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0220 	bic.w	r2, r2, #32
 80033d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0202 	bic.w	r2, r2, #2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	2164      	movs	r1, #100	@ 0x64
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	f000 f8e3 	bl	80035b4 <SPI_EndRxTxTransaction>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7ff ffa9 	bl	800338c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800343a:	e002      	b.n	8003442 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f7ff ff91 	bl	8003364 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff8e 	bl	8003378 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0203 	bic.w	r2, r2, #3
 8003480:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	f043 0210 	orr.w	r2, r3, #16
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff ff78 	bl	800338c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b4:	f7fd ff1e 	bl	80012f4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c4:	f7fd ff16 	bl	80012f4 <HAL_GetTick>
 80034c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ca:	4b39      	ldr	r3, [pc, #228]	@ (80035b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	0d1b      	lsrs	r3, r3, #20
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034da:	e054      	b.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d050      	beq.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e4:	f7fd ff06 	bl	80012f4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d902      	bls.n	80034fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d13d      	bne.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003508:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003512:	d111      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800351c:	d004      	beq.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003526:	d107      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003540:	d10f      	bne.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003560:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e017      	b.n	80035a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3b01      	subs	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d19b      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000

080035b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2201      	movs	r2, #1
 80035c8:	2102      	movs	r1, #2
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff ff6a 	bl	80034a4 <SPI_WaitFlagStateUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e032      	b.n	800364c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <SPI_EndRxTxTransaction+0xa0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <SPI_EndRxTxTransaction+0xa4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	0d5b      	lsrs	r3, r3, #21
 80035f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003604:	d112      	bne.n	800362c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	@ 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff ff47 	bl	80034a4 <SPI_WaitFlagStateUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00f      	b.n	800364c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3b01      	subs	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b80      	cmp	r3, #128	@ 0x80
 8003644:	d0f2      	beq.n	800362c <SPI_EndRxTxTransaction+0x78>
 8003646:	e000      	b.n	800364a <SPI_EndRxTxTransaction+0x96>
        break;
 8003648:	bf00      	nop
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000000 	.word	0x20000000
 8003658:	165e9f81 	.word	0x165e9f81

0800365c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e042      	b.n	80036f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fa70 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	@ 0x24
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800369e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fc85 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800373a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fb69 	bl	8003e32 <UART_Receive_IT>
      return;
 8003760:	e25b      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80de 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
 800376c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80d1 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
 8003792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f043 0208 	orr.w	r2, r3, #8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 81f2 	beq.w	8003c10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 faf4 	bl	8003e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	2b40      	cmp	r3, #64	@ 0x40
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_UART_IRQHandler+0x17a>
 800386e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04f      	beq.n	8003916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9fc 	bl	8003c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	2b40      	cmp	r3, #64	@ 0x40
 8003888:	d141      	bne.n	800390e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1d9      	bne.n	800388a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d013      	beq.n	8003906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	4a7e      	ldr	r2, [pc, #504]	@ (8003adc <HAL_UART_IRQHandler+0x3e0>)
 80038e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fa2c 	bl	8001d48 <HAL_DMA_Abort_IT>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003900:	4610      	mov	r0, r2
 8003902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00e      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f99e 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e00a      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f99a 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	e006      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f996 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003922:	e175      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	bf00      	nop
    return;
 8003926:	e173      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 814f 	bne.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8148 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8141 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	f040 80b6 	bne.w	8003ae0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8145 	beq.w	8003c14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003992:	429a      	cmp	r2, r3
 8003994:	f080 813e 	bcs.w	8003c14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800399e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039aa:	f000 8088 	beq.w	8003abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1d9      	bne.n	80039ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e1      	bne.n	80039fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003aa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe f8d5 	bl	8001c68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8c1 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ada:	e09b      	b.n	8003c14 <HAL_UART_IRQHandler+0x518>
 8003adc:	08003d3b 	.word	0x08003d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 808e 	beq.w	8003c18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8089 	beq.w	8003c18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e3      	bne.n	8003b3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ba8:	61fa      	str	r2, [r7, #28]
 8003baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e3      	bne.n	8003b84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f847 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bce:	e023      	b.n	8003c18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x4f4>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8ba 	bl	8003d62 <UART_Transmit_IT>
    return;
 8003bee:	e014      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <HAL_UART_IRQHandler+0x51e>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8fa 	bl	8003e02 <UART_EndTransmit_IT>
    return;
 8003c0e:	e004      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c18:	bf00      	nop
  }
}
 8003c1a:	37e8      	adds	r7, #232	@ 0xe8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b095      	sub	sp, #84	@ 0x54
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d119      	bne.n	8003d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0c:	61ba      	str	r2, [r7, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6979      	ldr	r1, [r7, #20]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d2e:	bf00      	nop
 8003d30:	3754      	adds	r7, #84	@ 0x54
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff ff77 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b21      	cmp	r3, #33	@ 0x21
 8003d74:	d13e      	bne.n	8003df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7e:	d114      	bne.n	8003daa <UART_Transmit_IT+0x48>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d110      	bne.n	8003daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	1c9a      	adds	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]
 8003da8:	e008      	b.n	8003dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6211      	str	r1, [r2, #32]
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fefc 	bl	8003c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b08c      	sub	sp, #48	@ 0x30
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b22      	cmp	r3, #34	@ 0x22
 8003e44:	f040 80ae 	bne.w	8003fa4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e50:	d117      	bne.n	8003e82 <UART_Receive_IT+0x50>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d113      	bne.n	8003e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e80:	e026      	b.n	8003ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e94:	d007      	beq.n	8003ea6 <UART_Receive_IT+0x74>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <UART_Receive_IT+0x82>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e008      	b.n	8003ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4619      	mov	r1, r3
 8003ede:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d15d      	bne.n	8003fa0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0220 	bic.w	r2, r2, #32
 8003ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d135      	bne.n	8003f96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	623a      	str	r2, [r7, #32]
 8003f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69f9      	ldr	r1, [r7, #28]
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d10a      	bne.n	8003f88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe64 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
 8003f94:	e002      	b.n	8003f9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fe4c 	bl	8003c34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e002      	b.n	8003fa6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3730      	adds	r7, #48	@ 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b0c0      	sub	sp, #256	@ 0x100
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	68d9      	ldr	r1, [r3, #12]
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	ea40 0301 	orr.w	r3, r0, r1
 8003fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004008:	f021 010c 	bic.w	r1, r1, #12
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004016:	430b      	orrs	r3, r1
 8004018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	6999      	ldr	r1, [r3, #24]
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	ea40 0301 	orr.w	r3, r0, r1
 8004036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <UART_SetConfig+0x2cc>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d005      	beq.n	8004050 <UART_SetConfig+0xa0>
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b8d      	ldr	r3, [pc, #564]	@ (8004280 <UART_SetConfig+0x2d0>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d104      	bne.n	800405a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fef6 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8004054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004058:	e003      	b.n	8004062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405a:	f7fe fedd 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 800405e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406c:	f040 810c 	bne.w	8004288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800407a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800407e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	1891      	adds	r1, r2, r2
 8004088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800408a:	415b      	adcs	r3, r3
 800408c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800408e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004092:	4621      	mov	r1, r4
 8004094:	eb12 0801 	adds.w	r8, r2, r1
 8004098:	4629      	mov	r1, r5
 800409a:	eb43 0901 	adc.w	r9, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb18 0303 	adds.w	r3, r8, r3
 80040bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040c0:	462b      	mov	r3, r5
 80040c2:	eb49 0303 	adc.w	r3, r9, r3
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040de:	460b      	mov	r3, r1
 80040e0:	18db      	adds	r3, r3, r3
 80040e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e4:	4613      	mov	r3, r2
 80040e6:	eb42 0303 	adc.w	r3, r2, r3
 80040ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040f4:	f7fc f870 	bl	80001d8 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <UART_SetConfig+0x2d4>)
 80040fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	011c      	lsls	r4, r3, #4
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004120:	415b      	adcs	r3, r3
 8004122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004128:	4641      	mov	r1, r8
 800412a:	eb12 0a01 	adds.w	sl, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb43 0b01 	adc.w	fp, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004148:	4692      	mov	sl, r2
 800414a:	469b      	mov	fp, r3
 800414c:	4643      	mov	r3, r8
 800414e:	eb1a 0303 	adds.w	r3, sl, r3
 8004152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004156:	464b      	mov	r3, r9
 8004158:	eb4b 0303 	adc.w	r3, fp, r3
 800415c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800416c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	647b      	str	r3, [r7, #68]	@ 0x44
 8004182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800418a:	f7fc f825 	bl	80001d8 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	@ 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041aa:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <UART_SetConfig+0x2d4>)
 80041ac:	fba3 2302 	umull	r2, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041b8:	441c      	add	r4, r3
 80041ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041d4:	415b      	adcs	r3, r3
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041dc:	4641      	mov	r1, r8
 80041de:	1851      	adds	r1, r2, r1
 80041e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041e2:	4649      	mov	r1, r9
 80041e4:	414b      	adcs	r3, r1
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041f4:	4659      	mov	r1, fp
 80041f6:	00cb      	lsls	r3, r1, #3
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	4651      	mov	r1, sl
 8004200:	00ca      	lsls	r2, r1, #3
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	4603      	mov	r3, r0
 8004208:	4642      	mov	r2, r8
 800420a:	189b      	adds	r3, r3, r2
 800420c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004210:	464b      	mov	r3, r9
 8004212:	460a      	mov	r2, r1
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800422c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004230:	460b      	mov	r3, r1
 8004232:	18db      	adds	r3, r3, r3
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004236:	4613      	mov	r3, r2
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800423e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004246:	f7fb ffc7 	bl	80001d8 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	@ 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	3332      	adds	r3, #50	@ 0x32
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 0207 	and.w	r2, r3, #7
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4422      	add	r2, r4
 8004276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004278:	e106      	b.n	8004488 <UART_SetConfig+0x4d8>
 800427a:	bf00      	nop
 800427c:	40011000 	.word	0x40011000
 8004280:	40011400 	.word	0x40011400
 8004284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	6239      	str	r1, [r7, #32]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042aa:	4641      	mov	r1, r8
 80042ac:	1854      	adds	r4, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0501 	adc.w	r5, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	00eb      	lsls	r3, r5, #3
 80042be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c2:	00e2      	lsls	r2, r4, #3
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	4643      	mov	r3, r8
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042d0:	464b      	mov	r3, r9
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042f6:	4629      	mov	r1, r5
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004300:	4621      	mov	r1, r4
 8004302:	008a      	lsls	r2, r1, #2
 8004304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004308:	f7fb ff66 	bl	80001d8 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b60      	ldr	r3, [pc, #384]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	61b9      	str	r1, [r7, #24]
 8004334:	415b      	adcs	r3, r3
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	4641      	mov	r1, r8
 800433e:	1851      	adds	r1, r2, r1
 8004340:	6139      	str	r1, [r7, #16]
 8004342:	4649      	mov	r1, r9
 8004344:	414b      	adcs	r3, r1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004354:	4659      	mov	r1, fp
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4651      	mov	r1, sl
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4642      	mov	r2, r8
 800436a:	189b      	adds	r3, r3, r2
 800436c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004370:	464b      	mov	r3, r9
 8004372:	460a      	mov	r2, r1
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004394:	4649      	mov	r1, r9
 8004396:	008b      	lsls	r3, r1, #2
 8004398:	4641      	mov	r1, r8
 800439a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439e:	4641      	mov	r1, r8
 80043a0:	008a      	lsls	r2, r1, #2
 80043a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043a6:	f7fb ff17 	bl	80001d8 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <UART_SetConfig+0x4e4>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	@ 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	@ 0x32
 80043c4:	4a33      	ldr	r2, [pc, #204]	@ (8004494 <UART_SetConfig+0x4e4>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d0:	441c      	add	r4, r3
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043da:	677a      	str	r2, [r7, #116]	@ 0x74
 80043dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	415b      	adcs	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004422:	464b      	mov	r3, r9
 8004424:	460a      	mov	r2, r1
 8004426:	eb42 0303 	adc.w	r3, r2, r3
 800442a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	663b      	str	r3, [r7, #96]	@ 0x60
 8004436:	667a      	str	r2, [r7, #100]	@ 0x64
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004444:	4649      	mov	r1, r9
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	4641      	mov	r1, r8
 800444a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800444e:	4641      	mov	r1, r8
 8004450:	008a      	lsls	r2, r1, #2
 8004452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004456:	f7fb febf 	bl	80001d8 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	@ 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	@ 0x32
 8004472:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4422      	add	r2, r4
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	b29b      	uxth	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2204      	movs	r2, #4
 80044dc:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b21a      	sxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004514:	b29b      	uxth	r3, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29b      	uxth	r3, r3
 800451e:	b21a      	sxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 800458e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004598:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e010      	b.n	80045de <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	330a      	adds	r3, #10
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	330a      	adds	r3, #10
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	2200      	movs	r2, #0
 80045d6:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	3301      	adds	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d9eb      	bls.n	80045bc <UG_Init+0xf4>
   }

   gui = g;
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <UG_Init+0x130>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
   return 1;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	2001c404 	.word	0x2001c404

080045fc <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004604:	4b04      	ldr	r3, [pc, #16]	@ (8004618 <UG_FontSelect+0x1c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	2001c404 	.word	0x2001c404

0800461c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af02      	add	r7, sp, #8
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004626:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <UG_FillScreen+0x44>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29b      	uxth	r3, r3
 8004636:	b21a      	sxth	r2, r3
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <UG_FillScreen+0x44>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	b219      	sxth	r1, r3
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	460b      	mov	r3, r1
 8004650:	2100      	movs	r1, #0
 8004652:	2000      	movs	r0, #0
 8004654:	f000 f806 	bl	8004664 <UG_FillFrame>
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	2001c404 	.word	0x2001c404

08004664 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af02      	add	r7, sp, #8
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	4623      	mov	r3, r4
 8004674:	80fb      	strh	r3, [r7, #6]
 8004676:	4603      	mov	r3, r0
 8004678:	80bb      	strh	r3, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	807b      	strh	r3, [r7, #2]
 800467e:	4613      	mov	r3, r2
 8004680:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8004682:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468a:	429a      	cmp	r2, r3
 800468c:	da05      	bge.n	800469a <UG_FillFrame+0x36>
     swap(x1,x2);
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	80fb      	strh	r3, [r7, #6]
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800469a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800469e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	da05      	bge.n	80046b2 <UG_FillFrame+0x4e>
     swap(y1,y2);
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	813b      	strh	r3, [r7, #8]
 80046aa:	883b      	ldrh	r3, [r7, #0]
 80046ac:	80bb      	strh	r3, [r7, #4]
 80046ae:	893b      	ldrh	r3, [r7, #8]
 80046b0:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <UG_FillFrame+0xe0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <UG_FillFrame+0xe0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	461d      	mov	r5, r3
 80046ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80046ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80046d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80046da:	8c3b      	ldrh	r3, [r7, #32]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	4623      	mov	r3, r4
 80046e0:	47a8      	blx	r5
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d028      	beq.n	800473a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80046e8:	88bb      	ldrh	r3, [r7, #4]
 80046ea:	81bb      	strh	r3, [r7, #12]
 80046ec:	e01e      	b.n	800472c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	81fb      	strh	r3, [r7, #14]
 80046f2:	e00f      	b.n	8004714 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <UG_FillFrame+0xe0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	8c3a      	ldrh	r2, [r7, #32]
 80046fe:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004702:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004706:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800470c:	b29b      	uxth	r3, r3
 800470e:	3301      	adds	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	81fb      	strh	r3, [r7, #14]
 8004714:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800471c:	429a      	cmp	r2, r3
 800471e:	dde9      	ble.n	80046f4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8004720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004724:	b29b      	uxth	r3, r3
 8004726:	3301      	adds	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	81bb      	strh	r3, [r7, #12]
 800472c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004730:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004734:	429a      	cmp	r2, r3
 8004736:	ddda      	ble.n	80046ee <UG_FillFrame+0x8a>
 8004738:	e000      	b.n	800473c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800473a:	bf00      	nop
      }
   }
}
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bdb0      	pop	{r4, r5, r7, pc}
 8004742:	bf00      	nop
 8004744:	2001c404 	.word	0x2001c404

08004748 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	80fb      	strh	r3, [r7, #6]
 8004752:	460b      	mov	r3, r1
 8004754:	80bb      	strh	r3, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <UG_DrawPixel+0x30>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004768:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800476c:	4798      	blx	r3
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	2001c404 	.word	0x2001c404

0800477c <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b08a      	sub	sp, #40	@ 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4623      	mov	r3, r4
 800478c:	80fb      	strh	r3, [r7, #6]
 800478e:	4603      	mov	r3, r0
 8004790:	80bb      	strh	r3, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	807b      	strh	r3, [r7, #2]
 8004796:	4613      	mov	r3, r2
 8004798:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800479a:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <UG_DrawLine+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d013      	beq.n	80047d2 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80047aa:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <UG_DrawLine+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	461d      	mov	r5, r3
 80047b2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80047b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80047ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80047be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4623      	mov	r3, r4
 80047c8:	47a8      	blx	r5
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80ae 	beq.w	800492e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80047dc:	883a      	ldrh	r2, [r7, #0]
 80047de:	88bb      	ldrh	r3, [r7, #4]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80047e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfb8      	it	lt
 80047ee:	425b      	neglt	r3, r3
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80047f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bfb8      	it	lt
 80047fc:	425b      	neglt	r3, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8004802:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	dd01      	ble.n	800480e <UG_DrawLine+0x92>
 800480a:	2301      	movs	r3, #1
 800480c:	e001      	b.n	8004812 <UG_DrawLine+0x96>
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8004814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004818:	2b00      	cmp	r3, #0
 800481a:	dd01      	ble.n	8004820 <UG_DrawLine+0xa4>
 800481c:	2301      	movs	r3, #1
 800481e:	e001      	b.n	8004824 <UG_DrawLine+0xa8>
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8004826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800482a:	105b      	asrs	r3, r3, #1
 800482c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800482e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004832:	105b      	asrs	r3, r3, #1
 8004834:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800483a:	88bb      	ldrh	r3, [r7, #4]
 800483c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800483e:	4b3e      	ldr	r3, [pc, #248]	@ (8004938 <UG_DrawLine+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004848:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800484c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004850:	4798      	blx	r3

   if( dxabs >= dyabs )
 8004852:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800485a:	429a      	cmp	r2, r3
 800485c:	db33      	blt.n	80048c6 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800485e:	2300      	movs	r3, #0
 8004860:	83fb      	strh	r3, [r7, #30]
 8004862:	e029      	b.n	80048b8 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8004864:	8b7a      	ldrh	r2, [r7, #26]
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	4413      	add	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800486e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004872:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004876:	429a      	cmp	r2, r3
 8004878:	db09      	blt.n	800488e <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800487a:	8b7a      	ldrh	r2, [r7, #26]
 800487c:	8a3b      	ldrh	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	b29b      	uxth	r3, r3
 8004882:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8004884:	8afa      	ldrh	r2, [r7, #22]
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	4413      	add	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800488e:	8b3a      	ldrh	r2, [r7, #24]
 8004890:	89bb      	ldrh	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	b29b      	uxth	r3, r3
 8004896:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8004898:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <UG_DrawLine+0x1bc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80048a2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80048a6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80048aa:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80048ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	83fb      	strh	r3, [r7, #30]
 80048b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80048bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	dbcf      	blt.n	8004864 <UG_DrawLine+0xe8>
 80048c4:	e034      	b.n	8004930 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80048c6:	2300      	movs	r3, #0
 80048c8:	83fb      	strh	r3, [r7, #30]
 80048ca:	e029      	b.n	8004920 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80048cc:	8bba      	ldrh	r2, [r7, #28]
 80048ce:	8a3b      	ldrh	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80048d6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80048da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048de:	429a      	cmp	r2, r3
 80048e0:	db09      	blt.n	80048f6 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80048e2:	8bba      	ldrh	r2, [r7, #28]
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80048ec:	8b3a      	ldrh	r2, [r7, #24]
 80048ee:	89bb      	ldrh	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80048f6:	8afa      	ldrh	r2, [r7, #22]
 80048f8:	897b      	ldrh	r3, [r7, #10]
 80048fa:	4413      	add	r3, r2
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8004900:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <UG_DrawLine+0x1bc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800490a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800490e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004912:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8004914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004918:	b29b      	uxth	r3, r3
 800491a:	3301      	adds	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	83fb      	strh	r3, [r7, #30]
 8004920:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004928:	429a      	cmp	r2, r3
 800492a:	dbcf      	blt.n	80048cc <UG_DrawLine+0x150>
 800492c:	e000      	b.n	8004930 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800492e:	bf00      	nop
      }
   }  
}
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bdb0      	pop	{r4, r5, r7, pc}
 8004936:	bf00      	nop
 8004938:	2001c404 	.word	0x2001c404

0800493c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b087      	sub	sp, #28
 8004940:	af02      	add	r7, sp, #8
 8004942:	4603      	mov	r3, r0
 8004944:	603a      	str	r2, [r7, #0]
 8004946:	80fb      	strh	r3, [r7, #6]
 8004948:	460b      	mov	r3, r1
 800494a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8004950:	88bb      	ldrh	r3, [r7, #4]
 8004952:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8004954:	4b44      	ldr	r3, [pc, #272]	@ (8004a68 <UG_PutString+0x12c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fab6 	bl	8004ecc <_UG_FontSelect>
   while ( *str != 0 )
 8004960:	e064      	b.n	8004a2c <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004962:	4b41      	ldr	r3, [pc, #260]	@ (8004a68 <UG_PutString+0x12c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800496e:	463b      	mov	r3, r7
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f8e7 	bl	8004b44 <_UG_DecodeUTF8>
 8004976:	4603      	mov	r3, r0
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	e004      	b.n	8004986 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	603a      	str	r2, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	2b0a      	cmp	r3, #10
 800498a:	d105      	bne.n	8004998 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800498c:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <UG_PutString+0x12c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	81fb      	strh	r3, [r7, #14]
         continue;
 8004996:	e049      	b.n	8004a2c <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f949 	bl	8004c34 <_UG_GetCharData>
 80049a2:	4603      	mov	r3, r0
 80049a4:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80049a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d03c      	beq.n	8004a2a <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 80049b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a68 <UG_PutString+0x12c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80049c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	4299      	cmp	r1, r3
 80049c8:	dc11      	bgt.n	80049ee <UG_PutString+0xb2>
      {
         xp = x;
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80049ce:	4b26      	ldr	r3, [pc, #152]	@ (8004a68 <UG_PutString+0x12c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80049d6:	b21b      	sxth	r3, r3
 80049d8:	4a23      	ldr	r2, [pc, #140]	@ (8004a68 <UG_PutString+0x12c>)
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 80049e0:	4413      	add	r3, r2
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	89bb      	ldrh	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <UG_PutString+0x12c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 80049f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <UG_PutString+0x12c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80049fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a02:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8004a06:	8978      	ldrh	r0, [r7, #10]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f000 fae0 	bl	8004fd0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8004a10:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <UG_PutString+0x12c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	893b      	ldrh	r3, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	89fb      	ldrh	r3, [r7, #14]
 8004a22:	4413      	add	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	81fb      	strh	r3, [r7, #14]
 8004a28:	e000      	b.n	8004a2c <UG_PutString+0xf0>
      if(cw==-1) continue;
 8004a2a:	bf00      	nop
   while ( *str != 0 )
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d196      	bne.n	8004962 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <UG_PutString+0x12c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004a44:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <UG_PutString+0x12c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	f04f 31ff 	mov.w	r1, #4294967295
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	47a0      	blx	r4
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2001c404 	.word	0x2001c404

08004a6c <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8004a76:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <UG_SetForecolor+0x20>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	2001c404 	.word	0x2001c404

08004a90 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <UG_SetBackcolor+0x20>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	2001c404 	.word	0x2001c404

08004ab4 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <UG_FontSetHSpace+0x24>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	b252      	sxtb	r2, r2
 8004ac6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2001c404 	.word	0x2001c404

08004adc <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8004ae6:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <UG_FontSetVSpace+0x24>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	b252      	sxtb	r2, r2
 8004aee:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2001c404 	.word	0x2001c404

08004b04 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <UG_FontSetTransparency+0x20>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	79fa      	ldrb	r2, [r7, #7]
 8004b14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	2001c404 	.word	0x2001c404

08004b28 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <UG_FontGetTransparency+0x18>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	2001c404 	.word	0x2001c404

08004b44 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  char c=**str;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8004b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db07      	blt.n	8004b6c <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
    return c;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	e05c      	b.n	8004c26 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8004b74:	e04f      	b.n	8004c16 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d130      	bne.n	8004bf0 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2bdf      	cmp	r3, #223	@ 0xdf
 8004b92:	d806      	bhi.n	8004ba2 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e023      	b.n	8004bea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2bef      	cmp	r3, #239	@ 0xef
 8004ba6:	d806      	bhi.n	8004bb6 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e019      	b.n	8004bea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2bf7      	cmp	r3, #247	@ 0xf7
 8004bba:	d806      	bhi.n	8004bca <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	e00f      	b.n	8004bea <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2bfb      	cmp	r3, #251	@ 0xfb
 8004bce:	d806      	bhi.n	8004bde <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	e005      	b.n	8004bea <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8004bde:	2305      	movs	r3, #5
 8004be0:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	81bb      	strh	r3, [r7, #12]
 8004bee:	e012      	b.n	8004c16 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8004bf0:	89bb      	ldrh	r3, [r7, #12]
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfe:	b21a      	sxth	r2, r3
 8004c00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	b21b      	sxth	r3, r3
 8004c08:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	73bb      	strb	r3, [r7, #14]
 8004c10:	7bbb      	ldrb	r3, [r7, #14]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <_UG_DecodeUTF8+0xde>
  while(**str)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1aa      	bne.n	8004b76 <_UG_DecodeUTF8+0x32>
 8004c20:	e000      	b.n	8004c24 <_UG_DecodeUTF8+0xe0>
        break;
 8004c22:	bf00      	nop
    }
  }
  return encoding;
 8004c24:	89bb      	ldrh	r3, [r7, #12]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8004c54:	4b98      	ldr	r3, [pc, #608]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c5a:	4b98      	ldr	r3, [pc, #608]	@ (8004ebc <_UG_GetCharData+0x288>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10f      	bne.n	8004c82 <_UG_GetCharData+0x4e>
 8004c62:	4b97      	ldr	r3, [pc, #604]	@ (8004ec0 <_UG_GetCharData+0x28c>)
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10a      	bne.n	8004c82 <_UG_GetCharData+0x4e>
    if(p){
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8004c72:	4b94      	ldr	r3, [pc, #592]	@ (8004ec4 <_UG_GetCharData+0x290>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004c7a:	4b93      	ldr	r3, [pc, #588]	@ (8004ec8 <_UG_GetCharData+0x294>)
 8004c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c80:	e116      	b.n	8004eb0 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8004c82:	4b8d      	ldr	r3, [pc, #564]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80cc 	beq.w	8004e28 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2bfc      	cmp	r3, #252	@ 0xfc
 8004c94:	f300 80c8 	bgt.w	8004e28 <_UG_GetCharData+0x1f4>
 8004c98:	2bd6      	cmp	r3, #214	@ 0xd6
 8004c9a:	da09      	bge.n	8004cb0 <_UG_GetCharData+0x7c>
 8004c9c:	2bc4      	cmp	r3, #196	@ 0xc4
 8004c9e:	d06c      	beq.n	8004d7a <_UG_GetCharData+0x146>
 8004ca0:	2bc4      	cmp	r3, #196	@ 0xc4
 8004ca2:	f300 80c1 	bgt.w	8004e28 <_UG_GetCharData+0x1f4>
 8004ca6:	2bb0      	cmp	r3, #176	@ 0xb0
 8004ca8:	d06d      	beq.n	8004d86 <_UG_GetCharData+0x152>
 8004caa:	2bb5      	cmp	r3, #181	@ 0xb5
 8004cac:	d068      	beq.n	8004d80 <_UG_GetCharData+0x14c>
 8004cae:	e06e      	b.n	8004d8e <_UG_GetCharData+0x15a>
 8004cb0:	3bd6      	subs	r3, #214	@ 0xd6
 8004cb2:	2b26      	cmp	r3, #38	@ 0x26
 8004cb4:	f200 80b8 	bhi.w	8004e28 <_UG_GetCharData+0x1f4>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <_UG_GetCharData+0x8c>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004d63 	.word	0x08004d63
 8004cc4:	08004e29 	.word	0x08004e29
 8004cc8:	08004e29 	.word	0x08004e29
 8004ccc:	08004e29 	.word	0x08004e29
 8004cd0:	08004e29 	.word	0x08004e29
 8004cd4:	08004e29 	.word	0x08004e29
 8004cd8:	08004d6f 	.word	0x08004d6f
 8004cdc:	08004e29 	.word	0x08004e29
 8004ce0:	08004e29 	.word	0x08004e29
 8004ce4:	08004e29 	.word	0x08004e29
 8004ce8:	08004e29 	.word	0x08004e29
 8004cec:	08004e29 	.word	0x08004e29
 8004cf0:	08004e29 	.word	0x08004e29
 8004cf4:	08004e29 	.word	0x08004e29
 8004cf8:	08004d75 	.word	0x08004d75
 8004cfc:	08004e29 	.word	0x08004e29
 8004d00:	08004e29 	.word	0x08004e29
 8004d04:	08004e29 	.word	0x08004e29
 8004d08:	08004e29 	.word	0x08004e29
 8004d0c:	08004e29 	.word	0x08004e29
 8004d10:	08004e29 	.word	0x08004e29
 8004d14:	08004e29 	.word	0x08004e29
 8004d18:	08004e29 	.word	0x08004e29
 8004d1c:	08004e29 	.word	0x08004e29
 8004d20:	08004e29 	.word	0x08004e29
 8004d24:	08004e29 	.word	0x08004e29
 8004d28:	08004e29 	.word	0x08004e29
 8004d2c:	08004e29 	.word	0x08004e29
 8004d30:	08004e29 	.word	0x08004e29
 8004d34:	08004e29 	.word	0x08004e29
 8004d38:	08004e29 	.word	0x08004e29
 8004d3c:	08004e29 	.word	0x08004e29
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004e29 	.word	0x08004e29
 8004d48:	08004e29 	.word	0x08004e29
 8004d4c:	08004e29 	.word	0x08004e29
 8004d50:	08004e29 	.word	0x08004e29
 8004d54:	08004e29 	.word	0x08004e29
 8004d58:	08004d69 	.word	0x08004d69
    {
       case 0xF6: encoding = 0x94; break; // ö
 8004d5c:	2394      	movs	r3, #148	@ 0x94
 8004d5e:	80fb      	strh	r3, [r7, #6]
 8004d60:	e015      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8004d62:	2399      	movs	r3, #153	@ 0x99
 8004d64:	80fb      	strh	r3, [r7, #6]
 8004d66:	e012      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8004d68:	2381      	movs	r3, #129	@ 0x81
 8004d6a:	80fb      	strh	r3, [r7, #6]
 8004d6c:	e00f      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8004d6e:	239a      	movs	r3, #154	@ 0x9a
 8004d70:	80fb      	strh	r3, [r7, #6]
 8004d72:	e00c      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8004d74:	2384      	movs	r3, #132	@ 0x84
 8004d76:	80fb      	strh	r3, [r7, #6]
 8004d78:	e009      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8004d7a:	238e      	movs	r3, #142	@ 0x8e
 8004d7c:	80fb      	strh	r3, [r7, #6]
 8004d7e:	e006      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8004d80:	23e6      	movs	r3, #230	@ 0xe6
 8004d82:	80fb      	strh	r3, [r7, #6]
 8004d84:	e003      	b.n	8004d8e <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8004d86:	23f8      	movs	r3, #248	@ 0xf8
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	bf00      	nop
 8004d8c:	e04c      	b.n	8004e28 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004d8e:	e04b      	b.n	8004e28 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8004d90:	4b49      	ldr	r3, [pc, #292]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	8a7a      	ldrh	r2, [r7, #18]
 8004d98:	0052      	lsls	r2, r2, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fb7b 	bl	8004498 <ptr_8to16>
 8004da2:	4603      	mov	r3, r0
 8004da4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8004da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da06      	bge.n	8004dbc <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8004dae:	89fb      	ldrh	r3, [r7, #14]
 8004db0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004db4:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8004db6:	2301      	movs	r3, #1
 8004db8:	747b      	strb	r3, [r7, #17]
 8004dba:	e032      	b.n	8004e22 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8004dbc:	7c7b      	ldrb	r3, [r7, #17]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d021      	beq.n	8004e06 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	8afb      	ldrh	r3, [r7, #22]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d30d      	bcc.n	8004de6 <_UG_GetCharData+0x1b2>
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d809      	bhi.n	8004de6 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	8afb      	ldrh	r3, [r7, #22]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	8abb      	ldrh	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	82bb      	strh	r3, [r7, #20]
        found=1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	743b      	strb	r3, [r7, #16]
        break;
 8004de4:	e02a      	b.n	8004e3c <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	8afb      	ldrh	r3, [r7, #22]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d323      	bcc.n	8004e36 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8004dee:	89fa      	ldrh	r2, [r7, #14]
 8004df0:	8afb      	ldrh	r3, [r7, #22]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	8abb      	ldrh	r3, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	82bb      	strh	r3, [r7, #20]
      range=0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	747b      	strb	r3, [r7, #17]
 8004e04:	e00d      	b.n	8004e22 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d102      	bne.n	8004e14 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	743b      	strb	r3, [r7, #16]
        break;
 8004e12:	e013      	b.n	8004e3c <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8004e14:	88fa      	ldrh	r2, [r7, #6]
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d30e      	bcc.n	8004e3a <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8004e1c:	8abb      	ldrh	r3, [r7, #20]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004e22:	8a7b      	ldrh	r3, [r7, #18]
 8004e24:	3301      	adds	r3, #1
 8004e26:	827b      	strh	r3, [r7, #18]
 8004e28:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004e2e:	8a7a      	ldrh	r2, [r7, #18]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3ad      	bcc.n	8004d90 <_UG_GetCharData+0x15c>
 8004e34:	e002      	b.n	8004e3c <_UG_GetCharData+0x208>
        break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <_UG_GetCharData+0x208>
        break;
 8004e3a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8004e3c:	7c3b      	ldrb	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d034      	beq.n	8004eac <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <_UG_GetCharData+0x288>)
 8004e4a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <_UG_GetCharData+0x28c>)
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	8aba      	ldrh	r2, [r7, #20]
 8004e5a:	4917      	ldr	r1, [pc, #92]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e5c:	6809      	ldr	r1, [r1, #0]
 8004e5e:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8004e60:	fb01 f202 	mul.w	r2, r1, r2
 8004e64:	4413      	add	r3, r2
 8004e66:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <_UG_GetCharData+0x290>)
 8004e68:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8004e6a:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e7a:	8abb      	ldrh	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b21a      	sxth	r2, r3
 8004e82:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <_UG_GetCharData+0x294>)
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e006      	b.n	8004e96 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <_UG_GetCharData+0x284>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004e90:	b21a      	sxth	r2, r3
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <_UG_GetCharData+0x294>)
 8004e94:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <_UG_GetCharData+0x290>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <_UG_GetCharData+0x294>)
 8004ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eaa:	e001      	b.n	8004eb0 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	2001c404 	.word	0x2001c404
 8004ebc:	2001c408 	.word	0x2001c408
 8004ec0:	2001c40c 	.word	0x2001c40c
 8004ec4:	2001c410 	.word	0x2001c410
 8004ec8:	2001c414 	.word	0x2001c414

08004ecc <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8004ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d070      	beq.n	8004fc2 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8004ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	4b37      	ldr	r3, [pc, #220]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da01      	bge.n	8004f0c <_UG_FontSelect+0x40>
 8004f08:	2201      	movs	r2, #1
 8004f0a:	e000      	b.n	8004f0e <_UG_FontSelect+0x42>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8004f38:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f3a:	681c      	ldr	r4, [r3, #0]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff faab 	bl	8004498 <ptr_8to16>
 8004f42:	4603      	mov	r3, r0
 8004f44:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3302      	adds	r3, #2
 8004f4a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff faa1 	bl	8004498 <ptr_8to16>
 8004f56:	4603      	mov	r3, r0
 8004f58:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f62:	681c      	ldr	r4, [r3, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fa97 	bl	8004498 <ptr_8to16>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3302      	adds	r3, #2
 8004f72:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8004f80:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e003      	b.n	8004fa0 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8004fa8:	4b08      	ldr	r3, [pc, #32]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <_UG_FontSelect+0x100>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fc0:	e000      	b.n	8004fc4 <_UG_FontSelect+0xf8>
    return;
 8004fc2:	bf00      	nop
}
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2001c404 	.word	0x2001c404

08004fd0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	80fb      	strh	r3, [r7, #6]
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	80bb      	strh	r3, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	807b      	strh	r3, [r7, #2]
 8004fea:	4613      	mov	r3, r2
 8004fec:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8004ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800522c <_UG_PutChar+0x25c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005006:	75fb      	strb	r3, [r7, #23]
 8005008:	4b88      	ldr	r3, [pc, #544]	@ (800522c <_UG_PutChar+0x25c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800501a:	f107 0208 	add.w	r2, r7, #8
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fe06 	bl	8004c34 <_UG_GetCharData>
 8005028:	4603      	mov	r3, r0
 800502a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800502c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d102      	bne.n	800503c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005036:	f04f 33ff 	mov.w	r3, #4294967295
 800503a:	e224      	b.n	8005486 <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 800503c:	4b7b      	ldr	r3, [pc, #492]	@ (800522c <_UG_PutChar+0x25c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005044:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 8005046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <_UG_PutChar+0x80>
     return 0;
 800504c:	2300      	movs	r3, #0
 800504e:	e21a      	b.n	8005486 <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8005050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005056:	4b75      	ldr	r3, [pc, #468]	@ (800522c <_UG_PutChar+0x25c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <_UG_PutChar+0x9e>
 8005068:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800506a:	3301      	adds	r3, #1
 800506c:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 800506e:	7dbb      	ldrb	r3, [r7, #22]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01c      	beq.n	80050ae <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005074:	4b6d      	ldr	r3, [pc, #436]	@ (800522c <_UG_PutChar+0x25c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800507a:	461c      	mov	r4, r3
 800507c:	88ba      	ldrh	r2, [r7, #4]
 800507e:	8abb      	ldrh	r3, [r7, #20]
 8005080:	4413      	add	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	b21a      	sxth	r2, r3
 800508a:	4b68      	ldr	r3, [pc, #416]	@ (800522c <_UG_PutChar+0x25c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005092:	4619      	mov	r1, r3
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	440b      	add	r3, r1
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	b21b      	sxth	r3, r3
 80050a0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80050a4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80050a8:	47a0      	blx	r4
 80050aa:	4603      	mov	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80050ae:	4b5f      	ldr	r3, [pc, #380]	@ (800522c <_UG_PutChar+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 8171 	bne.w	800539e <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80050bc:	2300      	movs	r3, #0
 80050be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80050c0:	e0eb      	b.n	800529a <_UG_PutChar+0x2ca>
     {
       c=0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80050c6:	2300      	movs	r3, #0
 80050c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80050ca:	e0de      	b.n	800528a <_UG_PutChar+0x2ba>
       {
         b = *data++;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60ba      	str	r2, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80050d6:	2300      	movs	r3, #0
 80050d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80050da:	e0c9      	b.n	8005270 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80050dc:	7f7b      	ldrb	r3, [r7, #29]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d033      	beq.n	800514e <_UG_PutChar+0x17e>
           {
             if(driver)
 80050e6:	7dbb      	ldrb	r3, [r7, #22]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01f      	beq.n	800512c <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80050ec:	8c3b      	ldrh	r3, [r7, #32]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <_UG_PutChar+0x138>
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80050f8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80050fc:	8c3a      	ldrh	r2, [r7, #32]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	4610      	mov	r0, r2
 8005102:	4798      	blx	r3
                 bpixels=0;
 8005104:	2300      	movs	r3, #0
 8005106:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005108:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <_UG_PutChar+0x154>
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8005114:	88ba      	ldrh	r2, [r7, #4]
 8005116:	8bfb      	ldrh	r3, [r7, #30]
 8005118:	4413      	add	r3, r2
 800511a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 800511c:	887a      	ldrh	r2, [r7, #2]
 800511e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005120:	4413      	add	r3, r2
 8005122:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005124:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005126:	3301      	adds	r3, #1
 8005128:	847b      	strh	r3, [r7, #34]	@ 0x22
 800512a:	e095      	b.n	8005258 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800512c:	4b3f      	ldr	r3, [pc, #252]	@ (800522c <_UG_PutChar+0x25c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	88b9      	ldrh	r1, [r7, #4]
 8005136:	8bfa      	ldrh	r2, [r7, #30]
 8005138:	440a      	add	r2, r1
 800513a:	b292      	uxth	r2, r2
 800513c:	b210      	sxth	r0, r2
 800513e:	8879      	ldrh	r1, [r7, #2]
 8005140:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005142:	440a      	add	r2, r1
 8005144:	b292      	uxth	r2, r2
 8005146:	b211      	sxth	r1, r2
 8005148:	883a      	ldrh	r2, [r7, #0]
 800514a:	4798      	blx	r3
 800514c:	e084      	b.n	8005258 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 800514e:	7dbb      	ldrb	r3, [r7, #22]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d06d      	beq.n	8005230 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005154:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005156:	2b00      	cmp	r3, #0
 8005158:	d064      	beq.n	8005224 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d15e      	bne.n	800521e <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8005160:	8839      	ldrh	r1, [r7, #0]
 8005162:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4610      	mov	r0, r2
 8005168:	4798      	blx	r3
                   fpixels=0;
 800516a:	2300      	movs	r3, #0
 800516c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800516e:	e059      	b.n	8005224 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005170:	88ba      	ldrh	r2, [r7, #4]
 8005172:	8abb      	ldrh	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	b29a      	uxth	r2, r3
 8005178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800517e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005180:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	d003      	beq.n	8005190 <_UG_PutChar+0x1c0>
 8005188:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	429a      	cmp	r2, r3
 800518e:	d224      	bcs.n	80051da <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005190:	4b26      	ldr	r3, [pc, #152]	@ (800522c <_UG_PutChar+0x25c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005196:	461d      	mov	r5, r3
 8005198:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800519c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80051a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	4413      	add	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b21c      	sxth	r4, r3
 80051ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80051b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051bc:	4413      	add	r3, r2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4622      	mov	r2, r4
 80051c4:	47a8      	blx	r5
 80051c6:	4603      	mov	r3, r0
 80051c8:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80051ca:	8839      	ldrh	r1, [r7, #0]
 80051cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
                       fpixels=0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051d8:	e021      	b.n	800521e <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80051da:	4b14      	ldr	r3, [pc, #80]	@ (800522c <_UG_PutChar+0x25c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051e0:	461c      	mov	r4, r3
 80051e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80051e6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80051ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	4413      	add	r3, r2
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	b21a      	sxth	r2, r3
 80051f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80051fc:	47a0      	blx	r4
 80051fe:	4603      	mov	r3, r0
 8005200:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005202:	8839      	ldrh	r1, [r7, #0]
 8005204:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4610      	mov	r0, r2
 800520a:	4798      	blx	r3
                       fpixels -= width;
 800520c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005214:	88bb      	ldrh	r3, [r7, #4]
 8005216:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8005218:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800521a:	3301      	adds	r3, #1
 800521c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 800521e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1a5      	bne.n	8005170 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005224:	8c3b      	ldrh	r3, [r7, #32]
 8005226:	3301      	adds	r3, #1
 8005228:	843b      	strh	r3, [r7, #32]
 800522a:	e015      	b.n	8005258 <_UG_PutChar+0x288>
 800522c:	2001c404 	.word	0x2001c404
             }
             else if(!trans)                           // Not accelerated output
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d110      	bne.n	8005258 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8005236:	4b96      	ldr	r3, [pc, #600]	@ (8005490 <_UG_PutChar+0x4c0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	88b9      	ldrh	r1, [r7, #4]
 8005240:	8bfa      	ldrh	r2, [r7, #30]
 8005242:	440a      	add	r2, r1
 8005244:	b292      	uxth	r2, r2
 8005246:	b210      	sxth	r0, r2
 8005248:	8879      	ldrh	r1, [r7, #2]
 800524a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800524c:	440a      	add	r2, r1
 800524e:	b292      	uxth	r2, r2
 8005250:	b211      	sxth	r1, r2
 8005252:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005256:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005258:	7f7b      	ldrb	r3, [r7, #29]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	777b      	strb	r3, [r7, #29]
           c++;
 800525e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3301      	adds	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800526a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800526c:	3301      	adds	r3, #1
 800526e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005270:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005272:	2b07      	cmp	r3, #7
 8005274:	d806      	bhi.n	8005284 <_UG_PutChar+0x2b4>
 8005276:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800527a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800527e:	429a      	cmp	r2, r3
 8005280:	f6ff af2c 	blt.w	80050dc <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8005284:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005286:	3301      	adds	r3, #1
 8005288:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800528a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800528c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800528e:	429a      	cmp	r2, r3
 8005290:	f4ff af1c 	bcc.w	80050cc <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005294:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005296:	3301      	adds	r3, #1
 8005298:	853b      	strh	r3, [r7, #40]	@ 0x28
 800529a:	4b7d      	ldr	r3, [pc, #500]	@ (8005490 <_UG_PutChar+0x4c0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80052a2:	461a      	mov	r2, r3
 80052a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80052a6:	4293      	cmp	r3, r2
 80052a8:	f4ff af0b 	bcc.w	80050c2 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80052ac:	7dbb      	ldrb	r3, [r7, #22]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80e7 	beq.w	8005482 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 80052b4:	8c3b      	ldrh	r3, [r7, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <_UG_PutChar+0x2fe>
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 80052c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80052c4:	8c3a      	ldrh	r2, [r7, #32]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	e0d9      	b.n	8005482 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 80052ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80d6 	beq.w	8005482 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d15c      	bne.n	8005396 <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 80052dc:	8839      	ldrh	r1, [r7, #0]
 80052de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4610      	mov	r0, r2
 80052e4:	4798      	blx	r3
 80052e6:	e0cc      	b.n	8005482 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80052e8:	88ba      	ldrh	r2, [r7, #4]
 80052ea:	8abb      	ldrh	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80052f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80052f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d003      	beq.n	8005308 <_UG_PutChar+0x338>
 8005300:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005302:	8a3b      	ldrh	r3, [r7, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d224      	bcs.n	8005352 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005308:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <_UG_PutChar+0x4c0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800530e:	461d      	mov	r5, r3
 8005310:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005314:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005318:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800531a:	8a3b      	ldrh	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29b      	uxth	r3, r3
 8005324:	b21c      	sxth	r4, r3
 8005326:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800532c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005330:	b29a      	uxth	r2, r3
 8005332:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005334:	4413      	add	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	b21b      	sxth	r3, r3
 800533a:	4622      	mov	r2, r4
 800533c:	47a8      	blx	r5
 800533e:	4603      	mov	r3, r0
 8005340:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005342:	8839      	ldrh	r1, [r7, #0]
 8005344:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4610      	mov	r0, r2
 800534a:	4798      	blx	r3
               fpixels=0;
 800534c:	2300      	movs	r3, #0
 800534e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005350:	e021      	b.n	8005396 <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005352:	4b4f      	ldr	r3, [pc, #316]	@ (8005490 <_UG_PutChar+0x4c0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005358:	461c      	mov	r4, r3
 800535a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800535e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005362:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005364:	8a3b      	ldrh	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	b21a      	sxth	r2, r3
 8005370:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005374:	47a0      	blx	r4
 8005376:	4603      	mov	r3, r0
 8005378:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800537a:	8839      	ldrh	r1, [r7, #0]
 800537c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	4610      	mov	r0, r2
 8005382:	4798      	blx	r3
               fpixels -= width;
 8005384:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005386:	8a3b      	ldrh	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8005390:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005392:	3301      	adds	r3, #1
 8005394:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 8005396:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1a5      	bne.n	80052e8 <_UG_PutChar+0x318>
 800539c:	e071      	b.n	8005482 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800539e:	4b3c      	ldr	r3, [pc, #240]	@ (8005490 <_UG_PutChar+0x4c0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d16b      	bne.n	8005482 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80053aa:	2300      	movs	r3, #0
 80053ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 80053ae:	e060      	b.n	8005472 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 80053b0:	2300      	movs	r3, #0
 80053b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80053b4:	e04a      	b.n	800544c <_UG_PutChar+0x47c>
       {
         b = *data++;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	60ba      	str	r2, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80053c0:	883b      	ldrh	r3, [r7, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	7f7a      	ldrb	r2, [r7, #29]
 80053c6:	fb03 f202 	mul.w	r2, r3, r2
 80053ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	7f79      	ldrb	r1, [r7, #29]
 80053d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	121b      	asrs	r3, r3, #8
 80053de:	b21b      	sxth	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80053e4:	883b      	ldrh	r3, [r7, #0]
 80053e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053ea:	7f79      	ldrb	r1, [r7, #29]
 80053ec:	fb03 f101 	mul.w	r1, r3, r1
 80053f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053f8:	7f78      	ldrb	r0, [r7, #29]
 80053fa:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80053fe:	fb00 f303 	mul.w	r3, r0, r3
 8005402:	440b      	add	r3, r1
 8005404:	121b      	asrs	r3, r3, #8
 8005406:	b21b      	sxth	r3, r3
 8005408:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800540c:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800540e:	4313      	orrs	r3, r2
 8005410:	b21b      	sxth	r3, r3
 8005412:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800541a:	8a7a      	ldrh	r2, [r7, #18]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	4611      	mov	r1, r2
 8005420:	2001      	movs	r0, #1
 8005422:	4798      	blx	r3
 8005424:	e00f      	b.n	8005446 <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005426:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <_UG_PutChar+0x4c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	88b9      	ldrh	r1, [r7, #4]
 8005430:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005432:	440a      	add	r2, r1
 8005434:	b292      	uxth	r2, r2
 8005436:	b210      	sxth	r0, r2
 8005438:	8879      	ldrh	r1, [r7, #2]
 800543a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800543c:	440a      	add	r2, r1
 800543e:	b292      	uxth	r2, r2
 8005440:	b211      	sxth	r1, r2
 8005442:	8a7a      	ldrh	r2, [r7, #18]
 8005444:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005446:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005448:	3301      	adds	r3, #1
 800544a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800544c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800544e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005452:	429a      	cmp	r2, r3
 8005454:	dbaf      	blt.n	80053b6 <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a0d      	ldr	r2, [pc, #52]	@ (8005490 <_UG_PutChar+0x4c0>)
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8005460:	4611      	mov	r1, r2
 8005462:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005466:	1a8a      	subs	r2, r1, r2
 8005468:	4413      	add	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800546c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800546e:	3301      	adds	r3, #1
 8005470:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005472:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <_UG_PutChar+0x4c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800547a:	461a      	mov	r2, r3
 800547c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800547e:	4293      	cmp	r3, r2
 8005480:	d396      	bcc.n	80053b0 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8005482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3730      	adds	r7, #48	@ 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bdb0      	pop	{r4, r5, r7, pc}
 800548e:	bf00      	nop
 8005490:	2001c404 	.word	0x2001c404

08005494 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	@ 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 800549c:	4b57      	ldr	r3, [pc, #348]	@ (80055fc <_UG_ProcessTouchData+0x168>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	88db      	ldrh	r3, [r3, #6]
 80054a2:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80054a4:	4b55      	ldr	r3, [pc, #340]	@ (80055fc <_UG_ProcessTouchData+0x168>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	891b      	ldrh	r3, [r3, #8]
 80054aa:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80054ac:	4b53      	ldr	r3, [pc, #332]	@ (80055fc <_UG_ProcessTouchData+0x168>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	791b      	ldrb	r3, [r3, #4]
 80054b2:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	83fb      	strh	r3, [r7, #30]
 80054be:	e090      	b.n	80055e2 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	8bfb      	ldrh	r3, [r7, #30]
 80054c6:	015b      	lsls	r3, r3, #5
 80054c8:	4413      	add	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d179      	bne.n	80055d6 <_UG_ProcessTouchData+0x142>
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d074      	beq.n	80055d6 <_UG_ProcessTouchData+0x142>
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d06f      	beq.n	80055d6 <_UG_ProcessTouchData+0x142>
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d16a      	bne.n	80055d6 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d047      	beq.n	8005596 <_UG_ProcessTouchData+0x102>
 8005506:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d042      	beq.n	8005596 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005510:	7f7b      	ldrb	r3, [r7, #29]
 8005512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800551a:	7f7b      	ldrb	r3, [r7, #29]
 800551c:	f043 0305 	orr.w	r3, r3, #5
 8005520:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005522:	7f7b      	ldrb	r3, [r7, #29]
 8005524:	f023 0318 	bic.w	r3, r3, #24
 8005528:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800552a:	7f7b      	ldrb	r3, [r7, #29]
 800552c:	f023 0320 	bic.w	r3, r3, #32
 8005530:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005538:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800553c:	429a      	cmp	r2, r3
 800553e:	db25      	blt.n	800558c <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005546:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800554a:	429a      	cmp	r2, r3
 800554c:	dc1e      	bgt.n	800558c <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005554:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	db17      	blt.n	800558c <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005562:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	dc10      	bgt.n	800558c <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800556a:	7f7b      	ldrb	r3, [r7, #29]
 800556c:	f043 0320 	orr.w	r3, r3, #32
 8005570:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005572:	7f7b      	ldrb	r3, [r7, #29]
 8005574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800557c:	7f7b      	ldrb	r3, [r7, #29]
 800557e:	f023 0304 	bic.w	r3, r3, #4
 8005582:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005584:	7f7b      	ldrb	r3, [r7, #29]
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 800558c:	7f7b      	ldrb	r3, [r7, #29]
 800558e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005592:	777b      	strb	r3, [r7, #29]
 8005594:	e01f      	b.n	80055d6 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005596:	7f7b      	ldrb	r3, [r7, #29]
 8005598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01a      	beq.n	80055d6 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80055a0:	7f7b      	ldrb	r3, [r7, #29]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80055aa:	7f7b      	ldrb	r3, [r7, #29]
 80055ac:	f043 0308 	orr.w	r3, r3, #8
 80055b0:	777b      	strb	r3, [r7, #29]
 80055b2:	e003      	b.n	80055bc <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80055b4:	7f7b      	ldrb	r3, [r7, #29]
 80055b6:	f043 0310 	orr.w	r3, r3, #16
 80055ba:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80055bc:	7f7b      	ldrb	r3, [r7, #29]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80055c6:	7f7b      	ldrb	r3, [r7, #29]
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80055ce:	7f7b      	ldrb	r3, [r7, #29]
 80055d0:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 80055d4:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	7f7a      	ldrb	r2, [r7, #29]
 80055da:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80055dc:	8bfb      	ldrh	r3, [r7, #30]
 80055de:	3301      	adds	r3, #1
 80055e0:	83fb      	strh	r3, [r7, #30]
 80055e2:	8bfa      	ldrh	r2, [r7, #30]
 80055e4:	8abb      	ldrh	r3, [r7, #20]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	f4ff af6a 	bcc.w	80054c0 <_UG_ProcessTouchData+0x2c>
   }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3724      	adds	r7, #36	@ 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	2001c404 	.word	0x2001c404

08005600 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	82fb      	strh	r3, [r7, #22]
 8005612:	e035      	b.n	8005680 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	8afb      	ldrh	r3, [r7, #22]
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	4413      	add	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d121      	bne.n	800567a <_UG_UpdateObjects+0x7a>
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01c      	beq.n	800567a <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <_UG_UpdateObjects+0x7a>
 800565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	da09      	bge.n	800567a <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	6939      	ldr	r1, [r7, #16]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	3301      	adds	r3, #1
 800567e:	82fb      	strh	r3, [r7, #22]
 8005680:	8afa      	ldrh	r2, [r7, #22]
 8005682:	8abb      	ldrh	r3, [r7, #20]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3c5      	bcc.n	8005614 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 800569c:	4b22      	ldr	r3, [pc, #136]	@ (8005728 <_UG_HandleEvents+0x94>)
 800569e:	2200      	movs	r2, #0
 80056a0:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80056a2:	4b21      	ldr	r3, [pc, #132]	@ (8005728 <_UG_HandleEvents+0x94>)
 80056a4:	2202      	movs	r2, #2
 80056a6:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	82fb      	strh	r3, [r7, #22]
 80056b2:	e02f      	b.n	8005714 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	015b      	lsls	r3, r3, #5
 80056bc:	4413      	add	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11e      	bne.n	800570e <_UG_HandleEvents+0x7a>
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d019      	beq.n	800570e <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	7e9b      	ldrb	r3, [r3, #26]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d015      	beq.n	800570e <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80056e2:	4a11      	ldr	r2, [pc, #68]	@ (8005728 <_UG_HandleEvents+0x94>)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	7e1a      	ldrb	r2, [r3, #24]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <_UG_HandleEvents+0x94>)
 80056ee:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	7e5a      	ldrb	r2, [r3, #25]
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <_UG_HandleEvents+0x94>)
 80056f6:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	7e9a      	ldrb	r2, [r3, #26]
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <_UG_HandleEvents+0x94>)
 80056fe:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	4808      	ldr	r0, [pc, #32]	@ (8005728 <_UG_HandleEvents+0x94>)
 8005706:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2200      	movs	r2, #0
 800570c:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800570e:	8afb      	ldrh	r3, [r7, #22]
 8005710:	3301      	adds	r3, #1
 8005712:	82fb      	strh	r3, [r7, #22]
 8005714:	8afa      	ldrh	r2, [r7, #22]
 8005716:	8abb      	ldrh	r3, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3cb      	bcc.n	80056b4 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2001c418 	.word	0x2001c418

0800572c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b08f      	sub	sp, #60	@ 0x3c
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 812c 	beq.w	8005996 <_UG_PutText+0x26a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8127 	beq.w	8005996 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	89db      	ldrh	r3, [r3, #14]
 800574c:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	895b      	ldrh	r3, [r3, #10]
 8005752:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	3302      	adds	r3, #2
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 800575e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005762:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800576c:	429a      	cmp	r2, r3
 800576e:	f2c0 8114 	blt.w	800599a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	891b      	ldrh	r3, [r3, #8]
 8005776:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	899b      	ldrh	r3, [r3, #12]
 800577c:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7d1b      	ldrb	r3, [r3, #20]
 8005782:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8adb      	ldrh	r3, [r3, #22]
 8005788:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8b1b      	ldrh	r3, [r3, #24]
 800578e:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fb94 	bl	8004ecc <_UG_FontSelect>

   rc=1;
 80057a4:	2301      	movs	r3, #1
 80057a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80057ac:	4b80      	ldr	r3, [pc, #512]	@ (80059b0 <_UG_PutText+0x284>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff f9c1 	bl	8004b44 <_UG_DecodeUTF8>
 80057c2:	4603      	mov	r3, r0
 80057c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80057c6:	e004      	b.n	80057d2 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	60ba      	str	r2, [r7, #8]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80057d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80057d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057da:	2b0a      	cmp	r3, #10
 80057dc:	d1e6      	bne.n	80057ac <_UG_PutText+0x80>
 80057de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80057e0:	3301      	adds	r3, #1
 80057e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80057e4:	e7e2      	b.n	80057ac <_UG_PutText+0x80>
     if(!chr) break;
 80057e6:	bf00      	nop
   }

   yp = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80057ec:	7e7b      	ldrb	r3, [r7, #25]
 80057ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01f      	beq.n	8005836 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80057f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80057f8:	8c3b      	ldrh	r3, [r7, #32]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3301      	adds	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8005804:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005806:	8bfb      	ldrh	r3, [r7, #30]
 8005808:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800580a:	fb11 f303 	smulbb	r3, r1, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	b29b      	uxth	r3, r3
 8005814:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 8005816:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005818:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800581a:	3b01      	subs	r3, #1
 800581c:	b299      	uxth	r1, r3
 800581e:	8abb      	ldrh	r3, [r7, #20]
 8005820:	fb11 f303 	smulbb	r3, r1, r3
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 800582c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005830:	2b00      	cmp	r3, #0
 8005832:	f2c0 80b4 	blt.w	800599e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005836:	7e7b      	ldrb	r3, [r7, #25]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <_UG_PutText+0x11c>
 8005840:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005844:	105b      	asrs	r3, r3, #1
 8005846:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 8005848:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800584a:	8c3b      	ldrh	r3, [r7, #32]
 800584c:	4413      	add	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8005852:	2300      	movs	r3, #0
 8005854:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	60bb      	str	r3, [r7, #8]
      wl = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800585e:	4b54      	ldr	r3, [pc, #336]	@ (80059b0 <_UG_PutText+0x284>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f968 	bl	8004b44 <_UG_DecodeUTF8>
 8005874:	4603      	mov	r3, r0
 8005876:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005878:	e004      	b.n	8005884 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	60ba      	str	r2, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8005884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01b      	beq.n	80058c2 <_UG_PutText+0x196>
 800588a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800588c:	2b0a      	cmp	r3, #10
 800588e:	d018      	beq.n	80058c2 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff f9cd 	bl	8004c34 <_UG_GetCharData>
 800589a:	4603      	mov	r3, r0
 800589c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800589e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d00a      	beq.n	80058be <_UG_PutText+0x192>
         sl++;
 80058a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058aa:	3301      	adds	r3, #1
 80058ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 80058ae:	8a7a      	ldrh	r2, [r7, #18]
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	4413      	add	r3, r2
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058b8:	4413      	add	r3, r2
 80058ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80058bc:	e7cf      	b.n	800585e <_UG_PutText+0x132>
         if (w == -1){continue;}
 80058be:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80058c0:	e7cd      	b.n	800585e <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80058c2:	8afb      	ldrh	r3, [r7, #22]
 80058c4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 80058ca:	8b7a      	ldrh	r2, [r7, #26]
 80058cc:	8bbb      	ldrh	r3, [r7, #28]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 80058d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 80058e2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db5b      	blt.n	80059a2 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80058ea:	7e7b      	ldrb	r3, [r7, #25]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <_UG_PutText+0x1ce>
 80058f4:	2300      	movs	r3, #0
 80058f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058f8:	e008      	b.n	800590c <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80058fa:	7e7b      	ldrb	r3, [r7, #25]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <_UG_PutText+0x1e0>
 8005904:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005908:	105b      	asrs	r3, r3, #1
 800590a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 800590c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800590e:	8bbb      	ldrh	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	b29b      	uxth	r3, r3
 8005914:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005916:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <_UG_PutText+0x284>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8005922:	f107 030c 	add.w	r3, r7, #12
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff f90c 	bl	8004b44 <_UG_DecodeUTF8>
 800592c:	4603      	mov	r3, r0
 800592e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005930:	e004      	b.n	800593c <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 800593c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d031      	beq.n	80059a6 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8005942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005944:	2b0a      	cmp	r3, #10
 8005946:	d01c      	beq.n	8005982 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8a1c      	ldrh	r4, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8a5b      	ldrh	r3, [r3, #18]
 8005950:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8005954:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8005958:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4623      	mov	r3, r4
 800595e:	f7ff fb37 	bl	8004fd0 <_UG_PutChar>
 8005962:	4603      	mov	r3, r0
 8005964:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8005966:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d0d2      	beq.n	8005916 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8005970:	8a7a      	ldrh	r2, [r7, #18]
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	4413      	add	r3, r2
 8005976:	b29a      	uxth	r2, r3
 8005978:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800597a:	4413      	add	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005980:	e7c9      	b.n	8005916 <_UG_PutText+0x1ea>
           break;
 8005982:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8005984:	8bfa      	ldrh	r2, [r7, #30]
 8005986:	8abb      	ldrh	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	b29a      	uxth	r2, r3
 800598c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800598e:	4413      	add	r3, r2
 8005990:	b29b      	uxth	r3, r3
 8005992:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8005994:	e75d      	b.n	8005852 <_UG_PutText+0x126>
     return;
 8005996:	bf00      	nop
 8005998:	e006      	b.n	80059a8 <_UG_PutText+0x27c>
     return;
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <_UG_PutText+0x27c>
        return;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <_UG_PutText+0x27c>
           return;
 80059a6:	bf00      	nop
   }
}
 80059a8:	3734      	adds	r7, #52	@ 0x34
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2001c404 	.word	0x2001c404

080059b4 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80059b4:	b5b0      	push	{r4, r5, r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4623      	mov	r3, r4
 80059c4:	80fb      	strh	r3, [r7, #6]
 80059c6:	4603      	mov	r3, r0
 80059c8:	80bb      	strh	r3, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	807b      	strh	r3, [r7, #2]
 80059ce:	4613      	mov	r3, r2
 80059d0:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	b21c      	sxth	r4, r3
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	61ba      	str	r2, [r7, #24]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	4622      	mov	r2, r4
 80059f4:	f7fe fec2 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80059f8:	88bb      	ldrh	r3, [r7, #4]
 80059fa:	3301      	adds	r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b219      	sxth	r1, r3
 8005a00:	883b      	ldrh	r3, [r7, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	b21c      	sxth	r4, r3
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	61ba      	str	r2, [r7, #24]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	f7fe feae 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	61ba      	str	r2, [r7, #24]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005a2c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a30:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005a34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	f7fe fe9e 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005a40:	883b      	ldrh	r3, [r7, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b21c      	sxth	r4, r3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	61ba      	str	r2, [r7, #24]
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a58:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4623      	mov	r3, r4
 8005a60:	f7fe fe8c 	bl	800477c <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	3301      	adds	r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	b218      	sxth	r0, r3
 8005a6c:	88bb      	ldrh	r3, [r7, #4]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b219      	sxth	r1, r3
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	3b02      	subs	r3, #2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b21c      	sxth	r4, r3
 8005a7c:	88bb      	ldrh	r3, [r7, #4]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b21d      	sxth	r5, r3
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1c9a      	adds	r2, r3, #2
 8005a88:	61ba      	str	r2, [r7, #24]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	462b      	mov	r3, r5
 8005a90:	4622      	mov	r2, r4
 8005a92:	f7fe fe73 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	b218      	sxth	r0, r3
 8005a9e:	88bb      	ldrh	r3, [r7, #4]
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	b219      	sxth	r1, r3
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	b21c      	sxth	r4, r3
 8005aae:	883b      	ldrh	r3, [r7, #0]
 8005ab0:	3b02      	subs	r3, #2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	b21d      	sxth	r5, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	61ba      	str	r2, [r7, #24]
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	f7fe fe5a 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	3301      	adds	r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	b218      	sxth	r0, r3
 8005ad0:	883b      	ldrh	r3, [r7, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b219      	sxth	r1, r3
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	b21c      	sxth	r4, r3
 8005ae0:	883b      	ldrh	r3, [r7, #0]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b21d      	sxth	r5, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	462b      	mov	r3, r5
 8005af4:	4622      	mov	r2, r4
 8005af6:	f7fe fe41 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	b218      	sxth	r0, r3
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	3301      	adds	r3, #1
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	b219      	sxth	r1, r3
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	b21c      	sxth	r4, r3
 8005b12:	883b      	ldrh	r3, [r7, #0]
 8005b14:	3b02      	subs	r3, #2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	b21d      	sxth	r5, r3
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	61ba      	str	r2, [r7, #24]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	462b      	mov	r3, r5
 8005b26:	4622      	mov	r2, r4
 8005b28:	f7fe fe28 	bl	800477c <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b218      	sxth	r0, r3
 8005b34:	88bb      	ldrh	r3, [r7, #4]
 8005b36:	3302      	adds	r3, #2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b219      	sxth	r1, r3
 8005b3c:	887b      	ldrh	r3, [r7, #2]
 8005b3e:	3b03      	subs	r3, #3
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	b21c      	sxth	r4, r3
 8005b44:	88bb      	ldrh	r3, [r7, #4]
 8005b46:	3302      	adds	r3, #2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	b21d      	sxth	r5, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	1c9a      	adds	r2, r3, #2
 8005b50:	61ba      	str	r2, [r7, #24]
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	462b      	mov	r3, r5
 8005b58:	4622      	mov	r2, r4
 8005b5a:	f7fe fe0f 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	3302      	adds	r3, #2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	b218      	sxth	r0, r3
 8005b66:	88bb      	ldrh	r3, [r7, #4]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	b219      	sxth	r1, r3
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	3302      	adds	r3, #2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b21c      	sxth	r4, r3
 8005b76:	883b      	ldrh	r3, [r7, #0]
 8005b78:	3b03      	subs	r3, #3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	b21d      	sxth	r5, r3
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	61ba      	str	r2, [r7, #24]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	462b      	mov	r3, r5
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	f7fe fdf6 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	3302      	adds	r3, #2
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b218      	sxth	r0, r3
 8005b98:	883b      	ldrh	r3, [r7, #0]
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	b219      	sxth	r1, r3
 8005ba0:	887b      	ldrh	r3, [r7, #2]
 8005ba2:	3b02      	subs	r3, #2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b21c      	sxth	r4, r3
 8005ba8:	883b      	ldrh	r3, [r7, #0]
 8005baa:	3b02      	subs	r3, #2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b21d      	sxth	r5, r3
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	61ba      	str	r2, [r7, #24]
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	462b      	mov	r3, r5
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	f7fe fddd 	bl	800477c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	3b02      	subs	r3, #2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	b218      	sxth	r0, r3
 8005bca:	88bb      	ldrh	r3, [r7, #4]
 8005bcc:	3302      	adds	r3, #2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	b219      	sxth	r1, r3
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	3b02      	subs	r3, #2
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	b21a      	sxth	r2, r3
 8005bda:	883b      	ldrh	r3, [r7, #0]
 8005bdc:	3b03      	subs	r3, #3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	b21c      	sxth	r4, r3
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4623      	mov	r3, r4
 8005bea:	f7fe fdc7 	bl	800477c <UG_DrawLine>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005bf8 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8005bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8005d78 <UG_Update+0x180>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UG_Update+0x2c>
 8005c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005d78 <UG_Update+0x180>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 8005c16:	4b58      	ldr	r3, [pc, #352]	@ (8005d78 <UG_Update+0x180>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8005c24:	4b54      	ldr	r3, [pc, #336]	@ (8005d78 <UG_Update+0x180>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	4b53      	ldr	r3, [pc, #332]	@ (8005d78 <UG_Update+0x180>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d071      	beq.n	8005d18 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8005c34:	4b50      	ldr	r3, [pc, #320]	@ (8005d78 <UG_Update+0x180>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d06c      	beq.n	8005d18 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8005c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8005d78 <UG_Update+0x180>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b4d      	ldr	r3, [pc, #308]	@ (8005d78 <UG_Update+0x180>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6912      	ldr	r2, [r2, #16]
 8005c48:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <UG_Update+0x180>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d78 <UG_Update+0x180>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68d2      	ldr	r2, [r2, #12]
 8005c54:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8005c56:	4b48      	ldr	r3, [pc, #288]	@ (8005d78 <UG_Update+0x180>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d045      	beq.n	8005cec <UG_Update+0xf4>
 8005c60:	4b45      	ldr	r3, [pc, #276]	@ (8005d78 <UG_Update+0x180>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	7d9b      	ldrb	r3, [r3, #22]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03d      	beq.n	8005cec <UG_Update+0xf4>
 8005c70:	4b41      	ldr	r3, [pc, #260]	@ (8005d78 <UG_Update+0x180>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	7a1b      	ldrb	r3, [r3, #8]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d035      	beq.n	8005cec <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8005c80:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <UG_Update+0x180>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d78 <UG_Update+0x180>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d123      	bne.n	8005ce0 <UG_Update+0xe8>
 8005c98:	4b37      	ldr	r3, [pc, #220]	@ (8005d78 <UG_Update+0x180>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005ca2:	4b35      	ldr	r3, [pc, #212]	@ (8005d78 <UG_Update+0x180>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d117      	bne.n	8005ce0 <UG_Update+0xe8>
 8005cb0:	4b31      	ldr	r3, [pc, #196]	@ (8005d78 <UG_Update+0x180>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8005cba:	4b2f      	ldr	r3, [pc, #188]	@ (8005d78 <UG_Update+0x180>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d10b      	bne.n	8005ce0 <UG_Update+0xe8>
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <UG_Update+0x180>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <UG_Update+0x180>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d005      	beq.n	8005cec <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8005ce0:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <UG_Update+0x180>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f96a 	bl	8005fc0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8005cec:	4b22      	ldr	r3, [pc, #136]	@ (8005d78 <UG_Update+0x180>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	7a1a      	ldrb	r2, [r3, #8]
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <UG_Update+0x180>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8005d02:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <UG_Update+0x180>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	7a1a      	ldrb	r2, [r3, #8]
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <UG_Update+0x180>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8005d18:	4b17      	ldr	r3, [pc, #92]	@ (8005d78 <UG_Update+0x180>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01b      	beq.n	8005d5a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8005d22:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <UG_Update+0x180>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7a1b      	ldrb	r3, [r3, #8]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9ea 	bl	8006110 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7a1b      	ldrb	r3, [r3, #8]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fba3 	bl	8005494 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fc56 	bl	8005600 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fc9d 	bl	8005694 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8005d5a:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <UG_Update+0x180>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <UG_Update+0x178>
     gui->device->flush();
 8005d66:	4b04      	ldr	r3, [pc, #16]	@ (8005d78 <UG_Update+0x180>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4798      	blx	r3
   }
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	2001c404 	.word	0x2001c404

08005d7c <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 8005d7c:	b5b0      	push	{r4, r5, r7, lr}
 8005d7e:	b08a      	sub	sp, #40	@ 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	603a      	str	r2, [r7, #0]
 8005d86:	80fb      	strh	r3, [r7, #6]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 810e 	beq.w	8005fb2 <UG_DrawBMP+0x236>

   if ( bmp->bpp == BMP_BPP_1){
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	7a1b      	ldrb	r3, [r3, #8]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d166      	bne.n	8005e6c <UG_DrawBMP+0xf0>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005da8:	e059      	b.n	8005e5e <UG_DrawBMP+0xe2>
      {
         for(x=0;x<bmp->width;x++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005dae:	e04a      	b.n	8005e46 <UG_DrawBMP+0xca>
         {
            yy = y / 8 ;
 8005db0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da00      	bge.n	8005dba <UG_DrawBMP+0x3e>
 8005db8:	3307      	adds	r3, #7
 8005dba:	10db      	asrs	r3, r3, #3
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 8005dc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005dc4:	425a      	negs	r2, r3
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	f002 0207 	and.w	r2, r2, #7
 8005dce:	bf58      	it	pl
 8005dd0:	4253      	negpl	r3, r2
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 8005dd6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	8889      	ldrh	r1, [r1, #4]
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	461a      	mov	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2201      	movs	r2, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 8005dfa:	7bba      	ldrb	r2, [r7, #14]
 8005dfc:	7b7b      	ldrb	r3, [r7, #13]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <UG_DrawBMP+0x98>
 8005e08:	4b6c      	ldr	r3, [pc, #432]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8005e10:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e12:	e004      	b.n	8005e1e <UG_DrawBMP+0xa2>
            else c = gui->back_color;
 8005e14:	4b69      	ldr	r3, [pc, #420]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8005e1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 8005e1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	4413      	add	r3, r2
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b218      	sxth	r0, r3
 8005e28:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e2a:	88bb      	ldrh	r3, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	b21b      	sxth	r3, r3
 8005e32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7fe fc87 	bl	8004748 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 8005e3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3301      	adds	r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005e46:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	8892      	ldrh	r2, [r2, #4]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	dbae      	blt.n	8005db0 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 8005e52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	88d2      	ldrh	r2, [r2, #6]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	db9f      	blt.n	8005daa <UG_DrawBMP+0x2e>
         }
      }
     return;
 8005e6a:	e0a3      	b.n	8005fb4 <UG_DrawBMP+0x238>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	7a1b      	ldrb	r3, [r3, #8]
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	f040 809f 	bne.w	8005fb4 <UG_DrawBMP+0x238>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 8005e76:	4b51      	ldr	r3, [pc, #324]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <UG_DrawBMP+0x122>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 8005e86:	4b4d      	ldr	r3, [pc, #308]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	47a0      	blx	r4
        return;
 8005e9c:	e08a      	b.n	8005fb4 <UG_DrawBMP+0x238>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 8005e9e:	4b47      	ldr	r3, [pc, #284]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d04b      	beq.n	8005f46 <UG_DrawBMP+0x1ca>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 8005eae:	4b43      	ldr	r3, [pc, #268]	@ (8005fbc <UG_DrawBMP+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	889a      	ldrh	r2, [r3, #4]
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	b21c      	sxth	r4, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88da      	ldrh	r2, [r3, #6]
 8005eca:	88bb      	ldrh	r3, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	b21b      	sxth	r3, r3
 8005ed6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005eda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ede:	4622      	mov	r2, r4
 8005ee0:	47a8      	blx	r5
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ef0:	e022      	b.n	8005f38 <UG_DrawBMP+0x1bc>
         {
           for(x=0;x<bmp->width;x++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ef6:	e00d      	b.n	8005f14 <UG_DrawBMP+0x198>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	61fa      	str	r2, [r7, #28]
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4611      	mov	r1, r2
 8005f04:	2001      	movs	r0, #1
 8005f06:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8005f08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	8892      	ldrh	r2, [r2, #4]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	dbeb      	blt.n	8005ef8 <UG_DrawBMP+0x17c>
             #endif
           }
           yp++;
 8005f20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3301      	adds	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8005f2c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3301      	adds	r3, #1
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f38:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	88d2      	ldrh	r2, [r2, #6]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	dbd6      	blt.n	8005ef2 <UG_DrawBMP+0x176>
         }
         return;
 8005f44:	e036      	b.n	8005fb4 <UG_DrawBMP+0x238>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f50:	e028      	b.n	8005fa4 <UG_DrawBMP+0x228>
     {
        for(x=0;x<bmp->width;x++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f56:	e013      	b.n	8005f80 <UG_DrawBMP+0x204>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	b218      	sxth	r0, r3
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	1c9a      	adds	r2, r3, #2
 8005f66:	61ba      	str	r2, [r7, #24]
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f7fe fbea 	bl	8004748 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 8005f74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	8892      	ldrh	r2, [r2, #4]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	dbe5      	blt.n	8005f58 <UG_DrawBMP+0x1dc>
          #endif
        }
        yp++;
 8005f8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3301      	adds	r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 8005f98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005fa4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	88d2      	ldrh	r2, [r2, #6]
 8005fac:	4293      	cmp	r3, r2
 8005fae:	dbd0      	blt.n	8005f52 <UG_DrawBMP+0x1d6>
 8005fb0:	e000      	b.n	8005fb4 <UG_DrawBMP+0x238>
   if ( bmp->p == NULL ) return;
 8005fb2:	bf00      	nop
     }
   }
   #endif
}
 8005fb4:	3728      	adds	r7, #40	@ 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2001c404 	.word	0x2001c404

08005fc0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b08f      	sub	sp, #60	@ 0x3c
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8098 	beq.w	8006100 <_UG_WindowDrawTitle+0x140>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7a1b      	ldrb	r3, [r3, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8091 	beq.w	8006100 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	89db      	ldrh	r3, [r3, #14]
 8005fe2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8a1b      	ldrh	r3, [r3, #16]
 8005fe8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8a5b      	ldrh	r3, [r3, #18]
 8005fee:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8a9b      	ldrh	r3, [r3, #20]
 8005ff4:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7d9b      	ldrb	r3, [r3, #22]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00f      	beq.n	8006022 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006002:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006004:	3303      	adds	r3, #3
 8006006:	b29b      	uxth	r3, r3
 8006008:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 800600a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800600c:	3303      	adds	r3, #3
 800600e:	b29b      	uxth	r3, r3
 8006010:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8006012:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006014:	3b03      	subs	r3, #3
 8006016:	b29b      	uxth	r3, r3
 8006018:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 800601a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800601c:	3b03      	subs	r3, #3
 800601e:	b29b      	uxth	r3, r3
 8006020:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006022:	4b3a      	ldr	r3, [pc, #232]	@ (800610c <_UG_WindowDrawTitle+0x14c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d106      	bne.n	800603c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006032:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006038:	83bb      	strh	r3, [r7, #28]
 800603a:	e005      	b.n	8006048 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006040:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006046:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800604e:	461a      	mov	r2, r3
 8006050:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006052:	4413      	add	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29b      	uxth	r3, r3
 800605a:	b21c      	sxth	r4, r3
 800605c:	8bfb      	ldrh	r3, [r7, #30]
 800605e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006062:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006066:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4623      	mov	r3, r4
 800606e:	f7fe faf9 	bl	8004664 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800607e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006080:	3303      	adds	r3, #3
 8006082:	b29b      	uxth	r3, r3
 8006084:	b21b      	sxth	r3, r3
 8006086:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006088:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800608a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 800608c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800608e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006096:	461a      	mov	r2, r3
 8006098:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800609a:	4413      	add	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80060ac:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80060b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 80060be:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fb31 	bl	800572c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060d0:	461a      	mov	r2, r3
 80060d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060d4:	4413      	add	r3, r2
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	b219      	sxth	r1, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060e0:	461a      	mov	r2, r3
 80060e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060e4:	4413      	add	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	f649 5413 	movw	r4, #40211	@ 0x9d13
 80060ee:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80060f2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80060f6:	9400      	str	r4, [sp, #0]
 80060f8:	f7fe fb40 	bl	800477c <UG_DrawLine>
      return UG_RESULT_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e001      	b.n	8006104 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006104:	4618      	mov	r0, r3
 8006106:	3734      	adds	r7, #52	@ 0x34
 8006108:	46bd      	mov	sp, r7
 800610a:	bd90      	pop	{r4, r7, pc}
 800610c:	2001c404 	.word	0x2001c404

08006110 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006110:	b590      	push	{r4, r7, lr}
 8006112:	b089      	sub	sp, #36	@ 0x24
 8006114:	af02      	add	r7, sp, #8
 8006116:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	89db      	ldrh	r3, [r3, #14]
 800611c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8a1b      	ldrh	r3, [r3, #16]
 8006122:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8a5b      	ldrh	r3, [r3, #18]
 8006128:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8a9b      	ldrh	r3, [r3, #20]
 800612e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7a1b      	ldrb	r3, [r3, #8]
 8006134:	f023 0320 	bic.w	r3, r3, #32
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7a1b      	ldrb	r3, [r3, #8]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8084 	beq.w	8006254 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7d9b      	ldrb	r3, [r3, #22]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d021      	beq.n	800619c <_UG_WindowUpdate+0x8c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7a1b      	ldrb	r3, [r3, #8]
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11b      	bne.n	800619c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006168:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800616c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006170:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006174:	4c43      	ldr	r4, [pc, #268]	@ (8006284 <_UG_WindowUpdate+0x174>)
 8006176:	9400      	str	r4, [sp, #0]
 8006178:	f7ff fc1c 	bl	80059b4 <_UG_DrawObjectFrame>
         xs+=3;
 800617c:	8abb      	ldrh	r3, [r7, #20]
 800617e:	3303      	adds	r3, #3
 8006180:	b29b      	uxth	r3, r3
 8006182:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006184:	8a7b      	ldrh	r3, [r7, #18]
 8006186:	3303      	adds	r3, #3
 8006188:	b29b      	uxth	r3, r3
 800618a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 800618c:	8a3b      	ldrh	r3, [r7, #16]
 800618e:	3b03      	subs	r3, #3
 8006190:	b29b      	uxth	r3, r3
 8006192:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	3b03      	subs	r3, #3
 8006198:	b29b      	uxth	r3, r3
 800619a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7d9b      	ldrb	r3, [r3, #22]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01a      	beq.n	80061de <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ff09 	bl	8005fc0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061b4:	461a      	mov	r2, r3
 80061b6:	8a7b      	ldrh	r3, [r7, #18]
 80061b8:	4413      	add	r3, r2
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7a1b      	ldrb	r3, [r3, #8]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7a1b      	ldrb	r3, [r3, #8]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	721a      	strb	r2, [r3, #8]
            return;
 80061dc:	e04e      	b.n	800627c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	899b      	ldrh	r3, [r3, #12]
 80061e2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80061e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80061ea:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80061ee:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4623      	mov	r3, r4
 80061f6:	f7fe fa35 	bl	8004664 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006200:	2300      	movs	r3, #0
 8006202:	82fb      	strh	r3, [r7, #22]
 8006204:	e021      	b.n	800624a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	8afb      	ldrh	r3, [r7, #22]
 800620c:	015b      	lsls	r3, r3, #5
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d112      	bne.n	8006244 <_UG_WindowUpdate+0x134>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <_UG_WindowUpdate+0x134>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d006      	beq.n	8006244 <_UG_WindowUpdate+0x134>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006244:	8afb      	ldrh	r3, [r7, #22]
 8006246:	3301      	adds	r3, #1
 8006248:	82fb      	strh	r3, [r7, #22]
 800624a:	8afa      	ldrh	r2, [r7, #22]
 800624c:	89bb      	ldrh	r3, [r7, #12]
 800624e:	429a      	cmp	r2, r3
 8006250:	d3d9      	bcc.n	8006206 <_UG_WindowUpdate+0xf6>
 8006252:	e013      	b.n	800627c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 800626c:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <_UG_WindowUpdate+0x178>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4623      	mov	r3, r4
 8006278:	f7fe f9f4 	bl	8004664 <UG_FillFrame>
   }
}
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}
 8006282:	bf00      	nop
 8006284:	08022d88 	.word	0x08022d88
 8006288:	2001c404 	.word	0x2001c404

0800628c <memset>:
 800628c:	4402      	add	r2, r0
 800628e:	4603      	mov	r3, r0
 8006290:	4293      	cmp	r3, r2
 8006292:	d100      	bne.n	8006296 <memset+0xa>
 8006294:	4770      	bx	lr
 8006296:	f803 1b01 	strb.w	r1, [r3], #1
 800629a:	e7f9      	b.n	8006290 <memset+0x4>

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4d0d      	ldr	r5, [pc, #52]	@ (80062d4 <__libc_init_array+0x38>)
 80062a0:	4c0d      	ldr	r4, [pc, #52]	@ (80062d8 <__libc_init_array+0x3c>)
 80062a2:	1b64      	subs	r4, r4, r5
 80062a4:	10a4      	asrs	r4, r4, #2
 80062a6:	2600      	movs	r6, #0
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	4d0b      	ldr	r5, [pc, #44]	@ (80062dc <__libc_init_array+0x40>)
 80062ae:	4c0c      	ldr	r4, [pc, #48]	@ (80062e0 <__libc_init_array+0x44>)
 80062b0:	f000 f818 	bl	80062e4 <_init>
 80062b4:	1b64      	subs	r4, r4, r5
 80062b6:	10a4      	asrs	r4, r4, #2
 80062b8:	2600      	movs	r6, #0
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	08022da8 	.word	0x08022da8
 80062d8:	08022da8 	.word	0x08022da8
 80062dc:	08022da8 	.word	0x08022da8
 80062e0:	08022dac 	.word	0x08022dac

080062e4 <_init>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr

080062f0 <_fini>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr
